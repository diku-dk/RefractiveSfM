function [sR,sT,sl1] = compute_2lp1(adapter)
% AUTORIGHTS
% ---------------------------------------------------------
% Copyright (c) 2018, Pedro Miraldo
% 
% This file is part of the Minimal Multi-Perspective Pose
% code and is available under the terms of the MIT License
% provided in LICENSE. Please retain this notice and
% LICENSE if you use this file (or any portion of it)
% in your project.
% ---------------------------------------------------------


% Get data from the adapter
% Camera data
C1           = adapter.Camera.C1;
IterPlane_L0 = adapter.Camera.IterPlane_L0;
D1           = adapter.Camera.D1;
IterPlane_L2 = adapter.Camera.IterPlane_L2;
% world data
L0P1 = adapter.World.L0.P1;
L0P2 = adapter.World.L0.P2;
P1   = adapter.World.P1;
P2 = adapter.World.L2.P1;
P3 = adapter.World.L2.P2;


% get the right coordinate systems
N1 = IterPlane_L0(1:3);
N11 = N1(1); N12 = N1(2); N13 = N1(3);

% Get the correct camera frame
e12_ =  N1(3); e13_ = -N1(2);
e11__ = N1(3); e13__ = -N1(1);

ne1_ = e12_*e12_ + e13_*e13_;
ne1__ = e11__*e11__ + e13__*e13__;
if ne1_ >= ne1__ ;
    e11 = 0;
    e12 = e12_/(ne1_)^(1/2);
    e13 = e13_/(ne1_)^(1/2);
else
    e11 = e11__/(ne1__)^(1/2);
    e12 = 0;
    e13 = e13__/(ne1__)^(1/2);
end

e21 = -N13*e12+N12*e13;
e22 = +N13*e11-N11*e13;
e23 = -N12*e11+N11*e12;

e31 = N11;
e32 = N12;
e33 = N13;

% Apply the transformation to the data
% D1
D11 = e11*D1(1) + e12*D1(2) + e13*D1(3);
D12 = e21*D1(1) + e22*D1(2) + e23*D1(3);
D13 = e31*D1(1) + e32*D1(2) + e33*D1(3);
% C1
C11 = e11*C1(1) + e12*C1(2) + e13*C1(3);
C12 = e21*C1(1) + e22*C1(2) + e23*C1(3);
C13 = e31*C1(1) + e32*C1(2) + e33*C1(3);
% IterPlane_L2
Pi1 = e11*IterPlane_L2(1) + e12*IterPlane_L2(2) + e13*IterPlane_L2(3);
Pi2 = e21*IterPlane_L2(1) + e22*IterPlane_L2(2) + e23*IterPlane_L2(3);
Pi3 = e31*IterPlane_L2(1) + e32*IterPlane_L2(2) + e33*IterPlane_L2(3);
Pi4 = IterPlane_L2(4);


% Transformation to the world data
DL1 = L0P2-L0P1;
f21 = DL1(1);
f22 = DL1(2);
f23 = DL1(3);
nf2 = (f21*f21+f22*f22+f23*f23)^(1/2);
f21 = f21/nf2; f22 = f22/nf2; f23 = f23/nf2;

n1_ = P1(1)-L0P1(1);
n2_ = P1(2)-L0P1(2);
n3_ = P1(3)-L0P1(3);
f11 = -f23*n2_+f22*n3_;
f12 = +f23*n1_-f21*n3_;
f13 = -f22*n1_+f21*n2_;
nf1 = (f11*f11+f12*f12+f13*f13)^(1/2);
f11 = f11/nf1;
f12 = f12/nf1;
f13 = f13/nf1;

f31 = -f13*f22+f12*f23;
f32 = +f13*f21-f11*f23;
f33 = -f12*f21+f11*f22;


p12_ = f21*P1(1) + f22*P1(2) + f23*P1(3);
LP12_ = f21*L0P1(1) + f22*L0P1(2) + f23*L0P1(3);
l = -LP12_ + p12_;

t1_ = -(f11*L0P1(1) + f12*L0P1(2) + f13*L0P1(3));
t2_ = -(f21*L0P1(1) + f22*L0P1(2) + f23*L0P1(3) + l);
t3_ = -(f31*L0P1(1) + f32*L0P1(2) + f33*L0P1(3));

P13 = f31*P1(1) + f32*P1(2) + f33*P1(3) + t3_;

p21 = f11*P2(1) + f12*P2(2) + f13*P2(3) + t1_;
p22 = f21*P2(1) + f22*P2(2) + f23*P2(3) + t2_;
p23 = f31*P2(1) + f32*P2(2) + f33*P2(3) + t3_;

p31 = f11*P3(1) + f12*P3(2) + f13*P3(3) + t1_;
p32 = f21*P3(1) + f22*P3(2) + f23*P3(3) + t2_;
p33 = f31*P3(1) + f32*P3(2) + f33*P3(3) + t3_;

d1 = p31 - p21;
d2 = p32 - p22;
d3 = p33 - p23;

m2 =  p33*d1 - p31*d3;
m3 = -p32*d1 + p31*d2;


% compute the pose
coef1 = D13^4*P13^4*d1^4*(d1^2 + d3^2)^2*(D11*Pi1 + D12*Pi2 + D13*Pi3)^4;
coef2 = 4*D13^3*P13^4*d1^4*(d1^2 + d3^2)^2*(D11*Pi1 + D12*Pi2 + D13*Pi3)^3*(D13*Pi4 + C11*D13*Pi1 + C13*D11*Pi1 + C12*D13*Pi2 + C13*D12*Pi2 + 2*C13*D13*Pi3);
coef3 = 2*D13^2*P13^4*d1^2*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(3*C11^2*D13^2*Pi1^2*d1^6 + 6*C11^2*D13^2*Pi1^2*d1^4*d3^2 + 3*C11^2*D13^2*Pi1^2*d1^2*d3^4 + 6*C11*C12*D13^2*Pi1*Pi2*d1^6 + 12*C11*C12*D13^2*Pi1*Pi2*d1^4*d3^2 + 6*C11*C12*D13^2*Pi1*Pi2*d1^2*d3^4 + 8*C11*C13*D11*D13*Pi1^2*d1^6 + 16*C11*C13*D11*D13*Pi1^2*d1^4*d3^2 + 8*C11*C13*D11*D13*Pi1^2*d1^2*d3^4 + 8*C11*C13*D12*D13*Pi1*Pi2*d1^6 + 16*C11*C13*D12*D13*Pi1*Pi2*d1^4*d3^2 + 8*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3^4 + 14*C11*C13*D13^2*Pi1*Pi3*d1^6 + 28*C11*C13*D13^2*Pi1*Pi3*d1^4*d3^2 + 14*C11*C13*D13^2*Pi1*Pi3*d1^2*d3^4 + 6*C11*D13^2*Pi1*Pi4*d1^6 + 12*C11*D13^2*Pi1*Pi4*d1^4*d3^2 + 6*C11*D13^2*Pi1*Pi4*d1^2*d3^4 + 3*C12^2*D13^2*Pi2^2*d1^6 + 6*C12^2*D13^2*Pi2^2*d1^4*d3^2 + 3*C12^2*D13^2*Pi2^2*d1^2*d3^4 + 8*C12*C13*D11*D13*Pi1*Pi2*d1^6 + 16*C12*C13*D11*D13*Pi1*Pi2*d1^4*d3^2 + 8*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3^4 + 8*C12*C13*D12*D13*Pi2^2*d1^6 + 16*C12*C13*D12*D13*Pi2^2*d1^4*d3^2 + 8*C12*C13*D12*D13*Pi2^2*d1^2*d3^4 + 14*C12*C13*D13^2*Pi2*Pi3*d1^6 + 28*C12*C13*D13^2*Pi2*Pi3*d1^4*d3^2 + 14*C12*C13*D13^2*Pi2*Pi3*d1^2*d3^4 + 6*C12*D13^2*Pi2*Pi4*d1^6 + 12*C12*D13^2*Pi2*Pi4*d1^4*d3^2 + 6*C12*D13^2*Pi2*Pi4*d1^2*d3^4 + 3*C13^2*D11^2*Pi1^2*d1^6 + 6*C13^2*D11^2*Pi1^2*d1^4*d3^2 + 3*C13^2*D11^2*Pi1^2*d1^2*d3^4 + 6*C13^2*D11*D12*Pi1*Pi2*d1^6 + 12*C13^2*D11*D12*Pi1*Pi2*d1^4*d3^2 + 6*C13^2*D11*D12*Pi1*Pi2*d1^2*d3^4 + 14*C13^2*D11*D13*Pi1*Pi3*d1^6 + 28*C13^2*D11*D13*Pi1*Pi3*d1^4*d3^2 + 14*C13^2*D11*D13*Pi1*Pi3*d1^2*d3^4 + 3*C13^2*D12^2*Pi2^2*d1^6 + 6*C13^2*D12^2*Pi2^2*d1^4*d3^2 + 3*C13^2*D12^2*Pi2^2*d1^2*d3^4 + 14*C13^2*D12*D13*Pi2*Pi3*d1^6 + 28*C13^2*D12*D13*Pi2*Pi3*d1^4*d3^2 + 14*C13^2*D12*D13*Pi2*Pi3*d1^2*d3^4 + 14*C13^2*D13^2*Pi3^2*d1^6 + 28*C13^2*D13^2*Pi3^2*d1^4*d3^2 + 14*C13^2*D13^2*Pi3^2*d1^2*d3^4 + 8*C13*D11*D13*Pi1*Pi4*d1^6 + 16*C13*D11*D13*Pi1*Pi4*d1^4*d3^2 + 8*C13*D11*D13*Pi1*Pi4*d1^2*d3^4 + 8*C13*D12*D13*Pi2*Pi4*d1^6 + 16*C13*D12*D13*Pi2*Pi4*d1^4*d3^2 + 8*C13*D12*D13*Pi2*Pi4*d1^2*d3^4 + 14*C13*D13^2*Pi3*Pi4*d1^6 + 28*C13*D13^2*Pi3*Pi4*d1^4*d3^2 + 14*C13*D13^2*Pi3*Pi4*d1^2*d3^4 + D11^2*P13^2*Pi1^2*d1^4*d2^2 - D11^2*P13^2*Pi1^2*d1^4*d3^2 - D11^2*P13^2*Pi1^2*d1^2*d2^2*d3^2 - D11^2*P13^2*Pi1^2*d1^2*d3^4 + 2*D11*D12*P13^2*Pi1*Pi2*d1^4*d2^2 - 2*D11*D12*P13^2*Pi1*Pi2*d1^4*d3^2 - 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d2^2*d3^2 - 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d3^4 - 2*D11*D13*P13^2*Pi1*Pi3*d1^6 - 4*D11*D13*P13^2*Pi1*Pi3*d1^4*d3^2 - 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3^4 + 2*D11*D13*P13*Pi1*Pi3*d1^5*m2 + 2*D11*D13*P13*Pi1*Pi3*d1^3*d2^2*m2 - 2*D11*D13*P13*Pi1*Pi3*d1^3*d2*d3*m3 + 2*D11*D13*P13*Pi1*Pi3*d1^3*d3^2*m2 - 2*D11*D13*P13*Pi1*Pi3*d1*d2^2*d3^2*m2 - 2*D11*D13*P13*Pi1*Pi3*d1*d2*d3^3*m3 + D12^2*P13^2*Pi2^2*d1^4*d2^2 - D12^2*P13^2*Pi2^2*d1^4*d3^2 - D12^2*P13^2*Pi2^2*d1^2*d2^2*d3^2 - D12^2*P13^2*Pi2^2*d1^2*d3^4 - 2*D12*D13*P13^2*Pi2*Pi3*d1^6 - 4*D12*D13*P13^2*Pi2*Pi3*d1^4*d3^2 - 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3^4 + 2*D12*D13*P13*Pi2*Pi3*d1^5*m2 + 2*D12*D13*P13*Pi2*Pi3*d1^3*d2^2*m2 - 2*D12*D13*P13*Pi2*Pi3*d1^3*d2*d3*m3 + 2*D12*D13*P13*Pi2*Pi3*d1^3*d3^2*m2 - 2*D12*D13*P13*Pi2*Pi3*d1*d2^2*d3^2*m2 - 2*D12*D13*P13*Pi2*Pi3*d1*d2*d3^3*m3 + D13^2*P13^2*Pi1^2*d1^4*d2^2 - D13^2*P13^2*Pi1^2*d1^2*d2^2*d3^2 + D13^2*P13^2*Pi2^2*d1^4*d2^2 - D13^2*P13^2*Pi2^2*d1^2*d2^2*d3^2 - 2*D13^2*P13^2*Pi3^2*d1^6 - 3*D13^2*P13^2*Pi3^2*d1^4*d3^2 - D13^2*P13^2*Pi3^2*d1^2*d3^4 - 2*D13^2*P13*Pi1^2*d1^3*d2^2*m2 + 2*D13^2*P13*Pi1^2*d1^3*d2*d3*m3 + 2*D13^2*P13*Pi1^2*d1*d2^2*d3^2*m2 + 2*D13^2*P13*Pi1^2*d1*d2*d3^3*m3 - 2*D13^2*P13*Pi2^2*d1^3*d2^2*m2 + 2*D13^2*P13*Pi2^2*d1^3*d2*d3*m3 + 2*D13^2*P13*Pi2^2*d1*d2^2*d3^2*m2 + 2*D13^2*P13*Pi2^2*d1*d2*d3^3*m3 + 2*D13^2*P13*Pi3^2*d1^5*m2 + 2*D13^2*P13*Pi3^2*d1^3*d3^2*m2 - D13^2*Pi1^2*d1^4*m3^2 + D13^2*Pi1^2*d1^2*d2^2*m2^2 - 2*D13^2*Pi1^2*d1^2*d2*d3*m2*m3 - 2*D13^2*Pi1^2*d1^2*d3^2*m3^2 - D13^2*Pi1^2*d2^2*d3^2*m2^2 - 2*D13^2*Pi1^2*d2*d3^3*m2*m3 - D13^2*Pi1^2*d3^4*m3^2 - D13^2*Pi2^2*d1^4*m3^2 + D13^2*Pi2^2*d1^2*d2^2*m2^2 - 2*D13^2*Pi2^2*d1^2*d2*d3*m2*m3 - 2*D13^2*Pi2^2*d1^2*d3^2*m3^2 - D13^2*Pi2^2*d2^2*d3^2*m2^2 - 2*D13^2*Pi2^2*d2*d3^3*m2*m3 - D13^2*Pi2^2*d3^4*m3^2 - D13^2*Pi3^2*d1^4*m3^2 + D13^2*Pi3^2*d1^2*d2^2*m2^2 - 2*D13^2*Pi3^2*d1^2*d2*d3*m2*m3 - 2*D13^2*Pi3^2*d1^2*d3^2*m3^2 - D13^2*Pi3^2*d2^2*d3^2*m2^2 - 2*D13^2*Pi3^2*d2*d3^3*m2*m3 - D13^2*Pi3^2*d3^4*m3^2 + 3*D13^2*Pi4^2*d1^6 + 6*D13^2*Pi4^2*d1^4*d3^2 + 3*D13^2*Pi4^2*d1^2*d3^4);
coef4 = P13^4*(2*D13^2*d1^2*(d1^2 - d3^2)*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(2*D13*C11^2*C13*Pi1^2*d1^4 - 2*D13*C11^2*C13*Pi1^2*d1^2*d3^2 + 4*D13*C11*C12*C13*Pi1*Pi2*d1^4 - 4*D13*C11*C12*C13*Pi1*Pi2*d1^2*d3^2 + 2*D11*C11*C13^2*Pi1^2*d1^4 - 2*D11*C11*C13^2*Pi1^2*d1^2*d3^2 + 2*D12*C11*C13^2*Pi1*Pi2*d1^4 - 2*D12*C11*C13^2*Pi1*Pi2*d1^2*d3^2 + 6*D13*C11*C13^2*Pi1*Pi3*d1^4 - 6*D13*C11*C13^2*Pi1*Pi3*d1^2*d3^2 + 4*D13*C11*C13*Pi1*Pi4*d1^4 - 4*D13*C11*C13*Pi1*Pi4*d1^2*d3^2 + 2*D11*C11*P13^2*Pi1^2*d1^2*d2^2 + 2*D11*C11*P13^2*Pi1^2*d1^2*d3^2 + 2*D12*C11*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D12*C11*P13^2*Pi1*Pi2*d1^2*d3^2 - 2*D13*C11*P13^2*Pi1*Pi3*d1^4 + 2*D13*C11*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D13*C11*P13*Pi1*Pi3*d1^3*m2 + 2*D13*C11*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D13*C11*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*D13*C12^2*C13*Pi2^2*d1^4 - 2*D13*C12^2*C13*Pi2^2*d1^2*d3^2 + 2*D11*C12*C13^2*Pi1*Pi2*d1^4 - 2*D11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*D12*C12*C13^2*Pi2^2*d1^4 - 2*D12*C12*C13^2*Pi2^2*d1^2*d3^2 + 6*D13*C12*C13^2*Pi2*Pi3*d1^4 - 6*D13*C12*C13^2*Pi2*Pi3*d1^2*d3^2 + 4*D13*C12*C13*Pi2*Pi4*d1^4 - 4*D13*C12*C13*Pi2*Pi4*d1^2*d3^2 + 2*D11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*D12*C12*P13^2*Pi2^2*d1^2*d2^2 + 2*D12*C12*P13^2*Pi2^2*d1^2*d3^2 - 2*D13*C12*P13^2*Pi2*Pi3*d1^4 + 2*D13*C12*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*D13*C12*P13*Pi2*Pi3*d1^3*m2 + 2*D13*C12*P13*Pi2*Pi3*d1*d2^2*m2 + 2*D13*C12*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*D11*C13^3*Pi1*Pi3*d1^4 - 2*D11*C13^3*Pi1*Pi3*d1^2*d3^2 + 2*D12*C13^3*Pi2*Pi3*d1^4 - 2*D12*C13^3*Pi2*Pi3*d1^2*d3^2 + 4*D13*C13^3*Pi3^2*d1^4 - 4*D13*C13^3*Pi3^2*d1^2*d3^2 + 2*D11*C13^2*Pi1*Pi4*d1^4 - 2*D11*C13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*C13^2*Pi2*Pi4*d1^4 - 2*D12*C13^2*Pi2*Pi4*d1^2*d3^2 + 6*D13*C13^2*Pi3*Pi4*d1^4 - 6*D13*C13^2*Pi3*Pi4*d1^2*d3^2 + 2*D13*C13*P13^2*Pi1^2*d1^2*d2^2 - 2*D11*C13*P13^2*Pi1*Pi3*d1^4 + 2*D11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D13*C13*P13^2*Pi2^2*d1^2*d2^2 - 2*D12*C13*P13^2*Pi2*Pi3*d1^4 + 2*D12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 - 4*D13*C13*P13^2*Pi3^2*d1^4 + 2*D13*C13*P13^2*Pi3^2*d1^2*d3^2 - 4*D13*C13*P13*Pi1^2*d1*d2^2*m2 - 4*D13*C13*P13*Pi1^2*d1*d2*d3*m3 + 2*D11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*D11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 - 4*D13*C13*P13*Pi2^2*d1*d2^2*m2 - 4*D13*C13*P13*Pi2^2*d1*d2*d3*m3 + 2*D12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*D12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*D12*C13*P13*Pi2*Pi3*d1*d2*d3*m3 + 4*D13*C13*P13*Pi3^2*d1^3*m2 - 2*D13*C13*Pi1^2*d1^2*m3^2 + 2*D13*C13*Pi1^2*d2^2*m2^2 + 4*D13*C13*Pi1^2*d2*d3*m2*m3 + 2*D13*C13*Pi1^2*d3^2*m3^2 - 2*D13*C13*Pi2^2*d1^2*m3^2 + 2*D13*C13*Pi2^2*d2^2*m2^2 + 4*D13*C13*Pi2^2*d2*d3*m2*m3 + 2*D13*C13*Pi2^2*d3^2*m3^2 - 2*D13*C13*Pi3^2*d1^2*m3^2 + 2*D13*C13*Pi3^2*d2^2*m2^2 + 4*D13*C13*Pi3^2*d2*d3*m2*m3 + 2*D13*C13*Pi3^2*d3^2*m3^2 + 2*D13*C13*Pi4^2*d1^4 - 2*D13*C13*Pi4^2*d1^2*d3^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d3^2 - 2*D13*P13^2*Pi3*Pi4*d1^4 + 2*D13*P13^2*Pi3*Pi4*d1^2*d3^2 + 2*D13*P13*Pi3*Pi4*d1^3*m2 + 2*D13*P13*Pi3*Pi4*d1*d2^2*m2 + 2*D13*P13*Pi3*Pi4*d1*d2*d3*m3) + 4*D13*d1^2*(d1^2 - d3^2)*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(D13*Pi4 + C11*D13*Pi1 + C13*D11*Pi1 + C12*D13*Pi2 + C13*D12*Pi2 + 2*C13*D13*Pi3)*(C11^2*D13^2*Pi1^2*d1^4 - C11^2*D13^2*Pi1^2*d1^2*d3^2 + 2*C11*C12*D13^2*Pi1*Pi2*d1^4 - 2*C11*C12*D13^2*Pi1*Pi2*d1^2*d3^2 + 4*C11*C13*D11*D13*Pi1^2*d1^4 - 4*C11*C13*D11*D13*Pi1^2*d1^2*d3^2 + 4*C11*C13*D12*D13*Pi1*Pi2*d1^4 - 4*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3^2 + 6*C11*C13*D13^2*Pi1*Pi3*d1^4 - 6*C11*C13*D13^2*Pi1*Pi3*d1^2*d3^2 + 2*C11*D13^2*Pi1*Pi4*d1^4 - 2*C11*D13^2*Pi1*Pi4*d1^2*d3^2 + C12^2*D13^2*Pi2^2*d1^4 - C12^2*D13^2*Pi2^2*d1^2*d3^2 + 4*C12*C13*D11*D13*Pi1*Pi2*d1^4 - 4*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3^2 + 4*C12*C13*D12*D13*Pi2^2*d1^4 - 4*C12*C13*D12*D13*Pi2^2*d1^2*d3^2 + 6*C12*C13*D13^2*Pi2*Pi3*d1^4 - 6*C12*C13*D13^2*Pi2*Pi3*d1^2*d3^2 + 2*C12*D13^2*Pi2*Pi4*d1^4 - 2*C12*D13^2*Pi2*Pi4*d1^2*d3^2 + C13^2*D11^2*Pi1^2*d1^4 - C13^2*D11^2*Pi1^2*d1^2*d3^2 + 2*C13^2*D11*D12*Pi1*Pi2*d1^4 - 2*C13^2*D11*D12*Pi1*Pi2*d1^2*d3^2 + 6*C13^2*D11*D13*Pi1*Pi3*d1^4 - 6*C13^2*D11*D13*Pi1*Pi3*d1^2*d3^2 + C13^2*D12^2*Pi2^2*d1^4 - C13^2*D12^2*Pi2^2*d1^2*d3^2 + 6*C13^2*D12*D13*Pi2*Pi3*d1^4 - 6*C13^2*D12*D13*Pi2*Pi3*d1^2*d3^2 + 6*C13^2*D13^2*Pi3^2*d1^4 - 6*C13^2*D13^2*Pi3^2*d1^2*d3^2 + 4*C13*D11*D13*Pi1*Pi4*d1^4 - 4*C13*D11*D13*Pi1*Pi4*d1^2*d3^2 + 4*C13*D12*D13*Pi2*Pi4*d1^4 - 4*C13*D12*D13*Pi2*Pi4*d1^2*d3^2 + 6*C13*D13^2*Pi3*Pi4*d1^4 - 6*C13*D13^2*Pi3*Pi4*d1^2*d3^2 + D11^2*P13^2*Pi1^2*d1^2*d2^2 + D11^2*P13^2*Pi1^2*d1^2*d3^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 - 2*D11*D13*P13^2*Pi1*Pi3*d1^4 + 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*D11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + D12^2*P13^2*Pi2^2*d1^2*d2^2 + D12^2*P13^2*Pi2^2*d1^2*d3^2 - 2*D12*D13*P13^2*Pi2*Pi3*d1^4 + 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*D12*D13*P13*Pi2*Pi3*d1^3*m2 + 2*D12*D13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*D12*D13*P13*Pi2*Pi3*d1*d2*d3*m3 + D13^2*P13^2*Pi1^2*d1^2*d2^2 + D13^2*P13^2*Pi2^2*d1^2*d2^2 - 2*D13^2*P13^2*Pi3^2*d1^4 + D13^2*P13^2*Pi3^2*d1^2*d3^2 - 2*D13^2*P13*Pi1^2*d1*d2^2*m2 - 2*D13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*D13^2*P13*Pi2^2*d1*d2^2*m2 - 2*D13^2*P13*Pi2^2*d1*d2*d3*m3 + 2*D13^2*P13*Pi3^2*d1^3*m2 - D13^2*Pi1^2*d1^2*m3^2 + D13^2*Pi1^2*d2^2*m2^2 + 2*D13^2*Pi1^2*d2*d3*m2*m3 + D13^2*Pi1^2*d3^2*m3^2 - D13^2*Pi2^2*d1^2*m3^2 + D13^2*Pi2^2*d2^2*m2^2 + 2*D13^2*Pi2^2*d2*d3*m2*m3 + D13^2*Pi2^2*d3^2*m3^2 - D13^2*Pi3^2*d1^2*m3^2 + D13^2*Pi3^2*d2^2*m2^2 + 2*D13^2*Pi3^2*d2*d3*m2*m3 + D13^2*Pi3^2*d3^2*m3^2 + D13^2*Pi4^2*d1^4 - D13^2*Pi4^2*d1^2*d3^2)) + 4*D13^2*P13^4*d1^2*(2*D13*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(d3*C11^2*C13*Pi1^2*d1^2 + 2*d3*C11*C12*C13*Pi1*Pi2*d1^2 + 2*d3*C11*C13^2*Pi1*Pi3*d1^2 + 2*d3*C11*C13*Pi1*Pi4*d1^2 - d3*C11*P13^2*Pi1*Pi3*d1^2 - d2*C11*P13*Pi1*Pi3*d1*m3 + d3*m2*C11*P13*Pi1*Pi3*d1 + d3*C12^2*C13*Pi2^2*d1^2 + 2*d3*C12*C13^2*Pi2*Pi3*d1^2 + 2*d3*C12*C13*Pi2*Pi4*d1^2 - d3*C12*P13^2*Pi2*Pi3*d1^2 - d2*C12*P13*Pi2*Pi3*d1*m3 + d3*m2*C12*P13*Pi2*Pi3*d1 + d3*C13^3*Pi3^2*d1^2 + 2*d3*C13^2*Pi3*Pi4*d1^2 - d3*C13*P13^2*Pi3^2*d1^2 + d2*C13*P13*Pi1^2*d1*m3 + d2*C13*P13*Pi2^2*d1*m3 + d3*m2*C13*P13*Pi3^2*d1 - d3*C13*Pi1^2*m3^2 - d2*m2*C13*Pi1^2*m3 - d3*C13*Pi2^2*m3^2 - d2*m2*C13*Pi2^2*m3 - d3*C13*Pi3^2*m3^2 - d2*m2*C13*Pi3^2*m3 + d3*C13*Pi4^2*d1^2 - d3*P13^2*Pi3*Pi4*d1^2 - d2*P13*Pi3*Pi4*d1*m3 + d3*m2*P13*Pi3*Pi4*d1) + 2*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3)*(D13*d3*C11^2*Pi1^2*d1^2 + 2*D13*d3*C11*C12*Pi1*Pi2*d1^2 + 2*D11*d3*C11*C13*Pi1^2*d1^2 + 2*D12*d3*C11*C13*Pi1*Pi2*d1^2 + 4*D13*d3*C11*C13*Pi1*Pi3*d1^2 + 2*D13*d3*C11*Pi1*Pi4*d1^2 + D13*d3*C12^2*Pi2^2*d1^2 + 2*D11*d3*C12*C13*Pi1*Pi2*d1^2 + 2*D12*d3*C12*C13*Pi2^2*d1^2 + 4*D13*d3*C12*C13*Pi2*Pi3*d1^2 + 2*D13*d3*C12*Pi2*Pi4*d1^2 + 2*D11*d3*C13^2*Pi1*Pi3*d1^2 + 2*D12*d3*C13^2*Pi2*Pi3*d1^2 + 3*D13*d3*C13^2*Pi3^2*d1^2 + 2*D11*d3*C13*Pi1*Pi4*d1^2 + 2*D12*d3*C13*Pi2*Pi4*d1^2 + 4*D13*d3*C13*Pi3*Pi4*d1^2 - D11*d3*P13^2*Pi1*Pi3*d1^2 - D12*d3*P13^2*Pi2*Pi3*d1^2 - D13*d3*P13^2*Pi3^2*d1^2 + D13*d2*P13*Pi1^2*d1*m3 - D11*d2*P13*Pi1*Pi3*d1*m3 + D11*d3*m2*P13*Pi1*Pi3*d1 + D13*d2*P13*Pi2^2*d1*m3 - D12*d2*P13*Pi2*Pi3*d1*m3 + D12*d3*m2*P13*Pi2*Pi3*d1 + D13*d3*m2*P13*Pi3^2*d1 - D13*d3*Pi1^2*m3^2 - D13*d2*m2*Pi1^2*m3 - D13*d3*Pi2^2*m3^2 - D13*d2*m2*Pi2^2*m3 - D13*d3*Pi3^2*m3^2 - D13*d2*m2*Pi3^2*m3 + D13*d3*Pi4^2*d1^2)) + 8*C13*D13*P13^4*d1^4*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(6*d3*C11^2*D13^2*Pi1^2*d1^2 + 12*d3*C11*C12*D13^2*Pi1*Pi2*d1^2 + 8*d3*C11*C13*D11*D13*Pi1^2*d1^2 + 8*d3*C11*C13*D12*D13*Pi1*Pi2*d1^2 + 20*d3*C11*C13*D13^2*Pi1*Pi3*d1^2 + 12*d3*C11*D13^2*Pi1*Pi4*d1^2 + 6*d3*C12^2*D13^2*Pi2^2*d1^2 + 8*d3*C12*C13*D11*D13*Pi1*Pi2*d1^2 + 8*d3*C12*C13*D12*D13*Pi2^2*d1^2 + 20*d3*C12*C13*D13^2*Pi2*Pi3*d1^2 + 12*d3*C12*D13^2*Pi2*Pi4*d1^2 + d3*C13^2*D11^2*Pi1^2*d1^2 + 2*d3*C13^2*D11*D12*Pi1*Pi2*d1^2 + 10*d3*C13^2*D11*D13*Pi1*Pi3*d1^2 + d3*C13^2*D12^2*Pi2^2*d1^2 + 10*d3*C13^2*D12*D13*Pi2*Pi3*d1^2 + 15*d3*C13^2*D13^2*Pi3^2*d1^2 + 8*d3*C13*D11*D13*Pi1*Pi4*d1^2 + 8*d3*C13*D12*D13*Pi2*Pi4*d1^2 + 20*d3*C13*D13^2*Pi3*Pi4*d1^2 - 2*d3*D11*D13*P13^2*Pi1*Pi3*d1^2 - 2*d2*D11*D13*P13*Pi1*Pi3*d1*m3 + 2*d3*m2*D11*D13*P13*Pi1*Pi3*d1 - 2*d3*D12*D13*P13^2*Pi2*Pi3*d1^2 - 2*d2*D12*D13*P13*Pi2*Pi3*d1*m3 + 2*d3*m2*D12*D13*P13*Pi2*Pi3*d1 - 2*d3*D13^2*P13^2*Pi3^2*d1^2 + 2*d2*D13^2*P13*Pi1^2*d1*m3 + 2*d2*D13^2*P13*Pi2^2*d1*m3 + 2*d3*m2*D13^2*P13*Pi3^2*d1 - 2*d3*D13^2*Pi1^2*m3^2 - 2*d2*m2*D13^2*Pi1^2*m3 - 2*d3*D13^2*Pi2^2*m3^2 - 2*d2*m2*D13^2*Pi2^2*m3 - 2*d3*D13^2*Pi3^2*m3^2 - 2*d2*m2*D13^2*Pi3^2*m3 + 6*d3*D13^2*Pi4^2*d1^2) + 8*D13*P13^4*d1^6*d3^2*(C13 - P13)*(C13 + P13)*(D11*Pi1 + D12*Pi2 + D13*Pi3)^3*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3);
coef5 = P13^4*((D13^2*Pi4^2*d1^4 + C11^2*D13^2*Pi1^2*d1^4 + C13^2*D11^2*Pi1^2*d1^4 + C12^2*D13^2*Pi2^2*d1^4 + C13^2*D12^2*Pi2^2*d1^4 + 6*C13^2*D13^2*Pi3^2*d1^4 - 2*D13^2*P13^2*Pi3^2*d1^4 - D13^2*Pi4^2*d1^2*d3^2 - D13^2*Pi1^2*d1^2*m3^2 + D13^2*Pi1^2*d2^2*m2^2 - D13^2*Pi2^2*d1^2*m3^2 + D13^2*Pi2^2*d2^2*m2^2 + D13^2*Pi1^2*d3^2*m3^2 - D13^2*Pi3^2*d1^2*m3^2 + D13^2*Pi3^2*d2^2*m2^2 + D13^2*Pi2^2*d3^2*m3^2 + D13^2*Pi3^2*d3^2*m3^2 + 2*D13^2*P13*Pi3^2*d1^3*m2 + 2*C11*D13^2*Pi1*Pi4*d1^4 + 2*C12*D13^2*Pi2*Pi4*d1^4 + 6*C13*D13^2*Pi3*Pi4*d1^4 - C11^2*D13^2*Pi1^2*d1^2*d3^2 - C13^2*D11^2*Pi1^2*d1^2*d3^2 - C12^2*D13^2*Pi2^2*d1^2*d3^2 - C13^2*D12^2*Pi2^2*d1^2*d3^2 - 6*C13^2*D13^2*Pi3^2*d1^2*d3^2 + D11^2*P13^2*Pi1^2*d1^2*d2^2 + D11^2*P13^2*Pi1^2*d1^2*d3^2 + D12^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi1^2*d1^2*d2^2 + D12^2*P13^2*Pi2^2*d1^2*d3^2 + D13^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*D13^2*Pi1^2*d2*d3*m2*m3 + 2*D13^2*Pi2^2*d2*d3*m2*m3 + 2*D13^2*Pi3^2*d2*d3*m2*m3 - 2*C11*D13^2*Pi1*Pi4*d1^2*d3^2 - 2*C12*D13^2*Pi2*Pi4*d1^2*d3^2 - 6*C13*D13^2*Pi3*Pi4*d1^2*d3^2 + 4*C13*D11*D13*Pi1*Pi4*d1^4 + 4*C13*D12*D13*Pi2*Pi4*d1^4 - 2*D13^2*P13*Pi1^2*d1*d2^2*m2 - 2*D13^2*P13*Pi2^2*d1*d2^2*m2 + 4*C11*C13*D11*D13*Pi1^2*d1^4 + 4*C12*C13*D12*D13*Pi2^2*d1^4 + 2*C11*C12*D13^2*Pi1*Pi2*d1^4 + 6*C11*C13*D13^2*Pi1*Pi3*d1^4 + 6*C12*C13*D13^2*Pi2*Pi3*d1^4 + 2*C13^2*D11*D12*Pi1*Pi2*d1^4 + 6*C13^2*D11*D13*Pi1*Pi3*d1^4 + 6*C13^2*D12*D13*Pi2*Pi3*d1^4 - 2*D11*D13*P13^2*Pi1*Pi3*d1^4 - 2*D12*D13*P13^2*Pi2*Pi3*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*D12*D13*P13*Pi2*Pi3*d1^3*m2 - 4*C13*D11*D13*Pi1*Pi4*d1^2*d3^2 - 4*C13*D12*D13*Pi2*Pi4*d1^2*d3^2 - 2*D13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*D13^2*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C13*D11*D13*Pi1^2*d1^2*d3^2 - 4*C12*C13*D12*D13*Pi2^2*d1^2*d3^2 - 2*C11*C12*D13^2*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13*D13^2*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13*D13^2*Pi2*Pi3*d1^2*d3^2 - 2*C13^2*D11*D12*Pi1*Pi2*d1^2*d3^2 - 6*C13^2*D11*D13*Pi1*Pi3*d1^2*d3^2 - 6*C13^2*D12*D13*Pi2*Pi3*d1^2*d3^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C13*D12*D13*Pi1*Pi2*d1^4 + 4*C12*C13*D11*D13*Pi1*Pi2*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D12*D13*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3^2 - 4*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*D12*D13*P13*Pi2*Pi3*d1*d2*d3*m3)^2 + 2*D13^2*d1^2*(d1^2 - d3^2)*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(C13^2*Pi4^2*d1^4 + C13^4*Pi3^2*d1^4 + P13^4*Pi3^2*d1^4 + C11^2*C13^2*Pi1^2*d1^4 + C12^2*C13^2*Pi2^2*d1^4 - 2*C13^2*P13^2*Pi3^2*d1^4 - C13^2*Pi4^2*d1^2*d3^2 - C13^4*Pi3^2*d1^2*d3^2 - C13^2*Pi1^2*d1^2*m3^2 + C13^2*Pi1^2*d2^2*m2^2 - C13^2*Pi2^2*d1^2*m3^2 + C13^2*Pi2^2*d2^2*m2^2 + C13^2*Pi1^2*d3^2*m3^2 - C13^2*Pi3^2*d1^2*m3^2 + C13^2*Pi3^2*d2^2*m2^2 + C13^2*Pi2^2*d3^2*m3^2 + C13^2*Pi3^2*d3^2*m3^2 - P13^4*Pi1^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d2^2 - P13^4*Pi2^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d3^2 - P13^2*Pi1^2*d2^2*m2^2 - P13^2*Pi2^2*d2^2*m2^2 + P13^2*Pi3^2*d1^2*m2^2 - P13^2*Pi1^2*d3^2*m3^2 + P13^2*Pi3^2*d1^2*m3^2 - P13^2*Pi2^2*d3^2*m3^2 + 2*C13^3*Pi3*Pi4*d1^4 - 2*P13^3*Pi3^2*d1^3*m2 - 2*C13^3*Pi3*Pi4*d1^2*d3^2 + 2*C13^2*P13*Pi3^2*d1^3*m2 + 2*P13^3*Pi1^2*d1*d2^2*m2 + 2*P13^3*Pi2^2*d1*d2^2*m2 + 2*C11*C13^2*Pi1*Pi4*d1^4 + 2*C11*C13^3*Pi1*Pi3*d1^4 + 2*C12*C13^2*Pi2*Pi4*d1^4 + 2*C12*C13^3*Pi2*Pi3*d1^4 - 2*C13*P13^2*Pi3*Pi4*d1^4 - C11^2*C13^2*Pi1^2*d1^2*d3^2 - C12^2*C13^2*Pi2^2*d1^2*d3^2 + C11^2*P13^2*Pi1^2*d1^2*d2^2 + C11^2*P13^2*Pi1^2*d1^2*d3^2 + C12^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi1^2*d1^2*d2^2 + C12^2*P13^2*Pi2^2*d1^2*d3^2 + C13^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*C13^2*Pi1^2*d2*d3*m2*m3 + 2*C13^2*Pi2^2*d2*d3*m2*m3 + 2*C13^2*Pi3^2*d2*d3*m2*m3 + 2*P13^3*Pi1^2*d1*d2*d3*m3 + 2*P13^3*Pi2^2*d1*d2*d3*m3 - 2*P13^2*Pi1^2*d2*d3*m2*m3 - 2*P13^2*Pi2^2*d2*d3*m2*m3 - 2*C11*C13^2*Pi1*Pi4*d1^2*d3^2 - 2*C11*C13^3*Pi1*Pi3*d1^2*d3^2 - 2*C12*C13^2*Pi2*Pi4*d1^2*d3^2 - 2*C12*C13^3*Pi2*Pi3*d1^2*d3^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*C13*P13^2*Pi3*Pi4*d1^2*d3^2 - 2*C13^2*P13*Pi1^2*d1*d2^2*m2 - 2*C13^2*P13*Pi2^2*d1*d2^2*m2 + 2*C13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*C12*C13^2*Pi1*Pi2*d1^4 - 2*C11*C13*P13^2*Pi1*Pi3*d1^4 - 2*C12*C13*P13^2*Pi2*Pi3*d1^4 + 2*C11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*C12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*P13*Pi3*Pi4*d1*d2^2*m2 - 2*C13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*C13^2*P13*Pi2^2*d1*d2*d3*m3 - 2*C11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*C13*P13*Pi2*Pi3*d1*d2*d3*m3) + 4*D13*d1^2*(d1^2 - d3^2)*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(D13*Pi4 + C11*D13*Pi1 + C13*D11*Pi1 + C12*D13*Pi2 + C13*D12*Pi2 + 2*C13*D13*Pi3)*(2*C13*D13*Pi4^2*d1^4 + 4*C13^3*D13*Pi3^2*d1^4 - 4*C13*D13*P13^2*Pi3^2*d1^4 - 2*C13*D13*Pi4^2*d1^2*d3^2 - 2*C13*D13*Pi1^2*d1^2*m3^2 + 2*C13*D13*Pi1^2*d2^2*m2^2 - 2*C13*D13*Pi2^2*d1^2*m3^2 + 2*C13*D13*Pi2^2*d2^2*m2^2 + 2*C13*D13*Pi1^2*d3^2*m3^2 - 2*C13*D13*Pi3^2*d1^2*m3^2 + 2*C13*D13*Pi3^2*d2^2*m2^2 + 2*C13*D13*Pi2^2*d3^2*m3^2 + 2*C13*D13*Pi3^2*d3^2*m3^2 - 4*C13^3*D13*Pi3^2*d1^2*d3^2 + 2*C13^2*D11*Pi1*Pi4*d1^4 + 2*C13^3*D11*Pi1*Pi3*d1^4 + 2*C13^2*D12*Pi2*Pi4*d1^4 + 2*C13^3*D12*Pi2*Pi3*d1^4 + 6*C13^2*D13*Pi3*Pi4*d1^4 - 2*D13*P13^2*Pi3*Pi4*d1^4 + 2*C11*C13^2*D11*Pi1^2*d1^4 + 2*C11^2*C13*D13*Pi1^2*d1^4 + 2*C12*C13^2*D12*Pi2^2*d1^4 + 2*C12^2*C13*D13*Pi2^2*d1^4 + 4*C13*D13*P13*Pi3^2*d1^3*m2 - 2*C13^2*D11*Pi1*Pi4*d1^2*d3^2 - 2*C13^3*D11*Pi1*Pi3*d1^2*d3^2 - 2*C13^2*D12*Pi2*Pi4*d1^2*d3^2 - 2*C13^3*D12*Pi2*Pi3*d1^2*d3^2 - 6*C13^2*D13*Pi3*Pi4*d1^2*d3^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*D13*P13^2*Pi3*Pi4*d1^2*d3^2 + 4*C11*C13*D13*Pi1*Pi4*d1^4 + 4*C12*C13*D13*Pi2*Pi4*d1^4 - 2*C11*C13^2*D11*Pi1^2*d1^2*d3^2 - 2*C11^2*C13*D13*Pi1^2*d1^2*d3^2 - 2*C12*C13^2*D12*Pi2^2*d1^2*d3^2 - 2*C12^2*C13*D13*Pi2^2*d1^2*d3^2 + 2*D13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d2^2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d3^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d2^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d3^2 + 2*C13*D13*P13^2*Pi1^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi2^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi3^2*d1^2*d3^2 + 2*C11*C13^2*D12*Pi1*Pi2*d1^4 + 2*C12*C13^2*D11*Pi1*Pi2*d1^4 + 6*C11*C13^2*D13*Pi1*Pi3*d1^4 + 6*C12*C13^2*D13*Pi2*Pi3*d1^4 - 2*C11*D13*P13^2*Pi1*Pi3*d1^4 - 2*C13*D11*P13^2*Pi1*Pi3*d1^4 - 2*C12*D13*P13^2*Pi2*Pi3*d1^4 - 2*C13*D12*P13^2*Pi2*Pi3*d1^4 + 2*C11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*C13*D11*P13*Pi1*Pi3*d1^3*m2 + 2*C12*D13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*D12*P13*Pi2*Pi3*d1^3*m2 + 2*D13*P13*Pi3*Pi4*d1*d2^2*m2 + 4*C13*D13*Pi1^2*d2*d3*m2*m3 + 4*C13*D13*Pi2^2*d2*d3*m2*m3 + 4*C13*D13*Pi3^2*d2*d3*m2*m3 - 4*C11*C13*D13*Pi1*Pi4*d1^2*d3^2 - 4*C12*C13*D13*Pi2*Pi4*d1^2*d3^2 - 4*C13*D13*P13*Pi1^2*d1*d2^2*m2 - 4*C13*D13*P13*Pi2^2*d1*d2^2*m2 - 2*C11*C13^2*D12*Pi1*Pi2*d1^2*d3^2 - 2*C12*C13^2*D11*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13^2*D13*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13^2*D13*Pi2*Pi3*d1^2*d3^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C13*D11*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*D12*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C12*C13*D13*Pi1*Pi2*d1^4 + 2*D13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C13*D11*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*D13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C13*D12*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C13*D13*P13*Pi1^2*d1*d2*d3*m3 - 4*C13*D13*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C12*C13*D13*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C13*D11*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*D13*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*C13*D12*P13*Pi2*Pi3*d1*d2*d3*m3)) + 4*D13^2*P13^4*d1^2*((D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3)^2 + 2*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3)*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3)) + 8*C13*D13*P13^4*d1^2*(2*D13*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3) + 2*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3)*(D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3)) + 4*P13^4*d1^4*d3*(C13 - P13)*(C13 + P13)*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(6*D13^2*Pi4^2*d1^2*d3 - 2*D13^2*Pi1^2*d3*m3^2 - 2*D13^2*Pi2^2*d3*m3^2 - 2*D13^2*Pi3^2*d3*m3^2 + 6*C11^2*D13^2*Pi1^2*d1^2*d3 + C13^2*D11^2*Pi1^2*d1^2*d3 + 6*C12^2*D13^2*Pi2^2*d1^2*d3 + C13^2*D12^2*Pi2^2*d1^2*d3 + 15*C13^2*D13^2*Pi3^2*d1^2*d3 - 2*D13^2*P13^2*Pi3^2*d1^2*d3 - 2*D13^2*Pi1^2*d2*m2*m3 - 2*D13^2*Pi2^2*d2*m2*m3 - 2*D13^2*Pi3^2*d2*m2*m3 + 12*C11*D13^2*Pi1*Pi4*d1^2*d3 + 12*C12*D13^2*Pi2*Pi4*d1^2*d3 + 20*C13*D13^2*Pi3*Pi4*d1^2*d3 + 2*D13^2*P13*Pi1^2*d1*d2*m3 + 2*D13^2*P13*Pi2^2*d1*d2*m3 + 2*D13^2*P13*Pi3^2*d1*d3*m2 + 8*C11*C13*D11*D13*Pi1^2*d1^2*d3 + 8*C12*C13*D12*D13*Pi2^2*d1^2*d3 + 12*C11*C12*D13^2*Pi1*Pi2*d1^2*d3 + 20*C11*C13*D13^2*Pi1*Pi3*d1^2*d3 + 20*C12*C13*D13^2*Pi2*Pi3*d1^2*d3 + 2*C13^2*D11*D12*Pi1*Pi2*d1^2*d3 + 10*C13^2*D11*D13*Pi1*Pi3*d1^2*d3 + 10*C13^2*D12*D13*Pi2*Pi3*d1^2*d3 - 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3 - 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3 + 8*C13*D11*D13*Pi1*Pi4*d1^2*d3 + 8*C13*D12*D13*Pi2*Pi4*d1^2*d3 - 2*D11*D13*P13*Pi1*Pi3*d1*d2*m3 + 2*D11*D13*P13*Pi1*Pi3*d1*d3*m2 - 2*D12*D13*P13*Pi2*Pi3*d1*d2*m3 + 2*D12*D13*P13*Pi2*Pi3*d1*d3*m2 + 8*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3 + 8*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3);
coef6 = P13^4*(2*(D13^2*Pi4^2*d1^4 + C11^2*D13^2*Pi1^2*d1^4 + C13^2*D11^2*Pi1^2*d1^4 + C12^2*D13^2*Pi2^2*d1^4 + C13^2*D12^2*Pi2^2*d1^4 + 6*C13^2*D13^2*Pi3^2*d1^4 - 2*D13^2*P13^2*Pi3^2*d1^4 - D13^2*Pi4^2*d1^2*d3^2 - D13^2*Pi1^2*d1^2*m3^2 + D13^2*Pi1^2*d2^2*m2^2 - D13^2*Pi2^2*d1^2*m3^2 + D13^2*Pi2^2*d2^2*m2^2 + D13^2*Pi1^2*d3^2*m3^2 - D13^2*Pi3^2*d1^2*m3^2 + D13^2*Pi3^2*d2^2*m2^2 + D13^2*Pi2^2*d3^2*m3^2 + D13^2*Pi3^2*d3^2*m3^2 + 2*D13^2*P13*Pi3^2*d1^3*m2 + 2*C11*D13^2*Pi1*Pi4*d1^4 + 2*C12*D13^2*Pi2*Pi4*d1^4 + 6*C13*D13^2*Pi3*Pi4*d1^4 - C11^2*D13^2*Pi1^2*d1^2*d3^2 - C13^2*D11^2*Pi1^2*d1^2*d3^2 - C12^2*D13^2*Pi2^2*d1^2*d3^2 - C13^2*D12^2*Pi2^2*d1^2*d3^2 - 6*C13^2*D13^2*Pi3^2*d1^2*d3^2 + D11^2*P13^2*Pi1^2*d1^2*d2^2 + D11^2*P13^2*Pi1^2*d1^2*d3^2 + D12^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi1^2*d1^2*d2^2 + D12^2*P13^2*Pi2^2*d1^2*d3^2 + D13^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*D13^2*Pi1^2*d2*d3*m2*m3 + 2*D13^2*Pi2^2*d2*d3*m2*m3 + 2*D13^2*Pi3^2*d2*d3*m2*m3 - 2*C11*D13^2*Pi1*Pi4*d1^2*d3^2 - 2*C12*D13^2*Pi2*Pi4*d1^2*d3^2 - 6*C13*D13^2*Pi3*Pi4*d1^2*d3^2 + 4*C13*D11*D13*Pi1*Pi4*d1^4 + 4*C13*D12*D13*Pi2*Pi4*d1^4 - 2*D13^2*P13*Pi1^2*d1*d2^2*m2 - 2*D13^2*P13*Pi2^2*d1*d2^2*m2 + 4*C11*C13*D11*D13*Pi1^2*d1^4 + 4*C12*C13*D12*D13*Pi2^2*d1^4 + 2*C11*C12*D13^2*Pi1*Pi2*d1^4 + 6*C11*C13*D13^2*Pi1*Pi3*d1^4 + 6*C12*C13*D13^2*Pi2*Pi3*d1^4 + 2*C13^2*D11*D12*Pi1*Pi2*d1^4 + 6*C13^2*D11*D13*Pi1*Pi3*d1^4 + 6*C13^2*D12*D13*Pi2*Pi3*d1^4 - 2*D11*D13*P13^2*Pi1*Pi3*d1^4 - 2*D12*D13*P13^2*Pi2*Pi3*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*D12*D13*P13*Pi2*Pi3*d1^3*m2 - 4*C13*D11*D13*Pi1*Pi4*d1^2*d3^2 - 4*C13*D12*D13*Pi2*Pi4*d1^2*d3^2 - 2*D13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*D13^2*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C13*D11*D13*Pi1^2*d1^2*d3^2 - 4*C12*C13*D12*D13*Pi2^2*d1^2*d3^2 - 2*C11*C12*D13^2*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13*D13^2*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13*D13^2*Pi2*Pi3*d1^2*d3^2 - 2*C13^2*D11*D12*Pi1*Pi2*d1^2*d3^2 - 6*C13^2*D11*D13*Pi1*Pi3*d1^2*d3^2 - 6*C13^2*D12*D13*Pi2*Pi3*d1^2*d3^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C13*D12*D13*Pi1*Pi2*d1^4 + 4*C12*C13*D11*D13*Pi1*Pi2*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D12*D13*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3^2 - 4*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*D12*D13*P13*Pi2*Pi3*d1*d2*d3*m3)*(2*C13*D13*Pi4^2*d1^4 + 4*C13^3*D13*Pi3^2*d1^4 - 4*C13*D13*P13^2*Pi3^2*d1^4 - 2*C13*D13*Pi4^2*d1^2*d3^2 - 2*C13*D13*Pi1^2*d1^2*m3^2 + 2*C13*D13*Pi1^2*d2^2*m2^2 - 2*C13*D13*Pi2^2*d1^2*m3^2 + 2*C13*D13*Pi2^2*d2^2*m2^2 + 2*C13*D13*Pi1^2*d3^2*m3^2 - 2*C13*D13*Pi3^2*d1^2*m3^2 + 2*C13*D13*Pi3^2*d2^2*m2^2 + 2*C13*D13*Pi2^2*d3^2*m3^2 + 2*C13*D13*Pi3^2*d3^2*m3^2 - 4*C13^3*D13*Pi3^2*d1^2*d3^2 + 2*C13^2*D11*Pi1*Pi4*d1^4 + 2*C13^3*D11*Pi1*Pi3*d1^4 + 2*C13^2*D12*Pi2*Pi4*d1^4 + 2*C13^3*D12*Pi2*Pi3*d1^4 + 6*C13^2*D13*Pi3*Pi4*d1^4 - 2*D13*P13^2*Pi3*Pi4*d1^4 + 2*C11*C13^2*D11*Pi1^2*d1^4 + 2*C11^2*C13*D13*Pi1^2*d1^4 + 2*C12*C13^2*D12*Pi2^2*d1^4 + 2*C12^2*C13*D13*Pi2^2*d1^4 + 4*C13*D13*P13*Pi3^2*d1^3*m2 - 2*C13^2*D11*Pi1*Pi4*d1^2*d3^2 - 2*C13^3*D11*Pi1*Pi3*d1^2*d3^2 - 2*C13^2*D12*Pi2*Pi4*d1^2*d3^2 - 2*C13^3*D12*Pi2*Pi3*d1^2*d3^2 - 6*C13^2*D13*Pi3*Pi4*d1^2*d3^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*D13*P13^2*Pi3*Pi4*d1^2*d3^2 + 4*C11*C13*D13*Pi1*Pi4*d1^4 + 4*C12*C13*D13*Pi2*Pi4*d1^4 - 2*C11*C13^2*D11*Pi1^2*d1^2*d3^2 - 2*C11^2*C13*D13*Pi1^2*d1^2*d3^2 - 2*C12*C13^2*D12*Pi2^2*d1^2*d3^2 - 2*C12^2*C13*D13*Pi2^2*d1^2*d3^2 + 2*D13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d2^2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d3^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d2^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d3^2 + 2*C13*D13*P13^2*Pi1^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi2^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi3^2*d1^2*d3^2 + 2*C11*C13^2*D12*Pi1*Pi2*d1^4 + 2*C12*C13^2*D11*Pi1*Pi2*d1^4 + 6*C11*C13^2*D13*Pi1*Pi3*d1^4 + 6*C12*C13^2*D13*Pi2*Pi3*d1^4 - 2*C11*D13*P13^2*Pi1*Pi3*d1^4 - 2*C13*D11*P13^2*Pi1*Pi3*d1^4 - 2*C12*D13*P13^2*Pi2*Pi3*d1^4 - 2*C13*D12*P13^2*Pi2*Pi3*d1^4 + 2*C11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*C13*D11*P13*Pi1*Pi3*d1^3*m2 + 2*C12*D13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*D12*P13*Pi2*Pi3*d1^3*m2 + 2*D13*P13*Pi3*Pi4*d1*d2^2*m2 + 4*C13*D13*Pi1^2*d2*d3*m2*m3 + 4*C13*D13*Pi2^2*d2*d3*m2*m3 + 4*C13*D13*Pi3^2*d2*d3*m2*m3 - 4*C11*C13*D13*Pi1*Pi4*d1^2*d3^2 - 4*C12*C13*D13*Pi2*Pi4*d1^2*d3^2 - 4*C13*D13*P13*Pi1^2*d1*d2^2*m2 - 4*C13*D13*P13*Pi2^2*d1*d2^2*m2 - 2*C11*C13^2*D12*Pi1*Pi2*d1^2*d3^2 - 2*C12*C13^2*D11*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13^2*D13*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13^2*D13*Pi2*Pi3*d1^2*d3^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C13*D11*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*D12*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C12*C13*D13*Pi1*Pi2*d1^4 + 2*D13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C13*D11*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*D13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C13*D12*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C13*D13*P13*Pi1^2*d1*d2*d3*m3 - 4*C13*D13*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C12*C13*D13*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C13*D11*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*D13*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*C13*D12*P13*Pi2*Pi3*d1*d2*d3*m3) + 4*D13*d1^2*(d1^2 - d3^2)*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(D13*Pi4 + C11*D13*Pi1 + C13*D11*Pi1 + C12*D13*Pi2 + C13*D12*Pi2 + 2*C13*D13*Pi3)*(C13^2*Pi4^2*d1^4 + C13^4*Pi3^2*d1^4 + P13^4*Pi3^2*d1^4 + C11^2*C13^2*Pi1^2*d1^4 + C12^2*C13^2*Pi2^2*d1^4 - 2*C13^2*P13^2*Pi3^2*d1^4 - C13^2*Pi4^2*d1^2*d3^2 - C13^4*Pi3^2*d1^2*d3^2 - C13^2*Pi1^2*d1^2*m3^2 + C13^2*Pi1^2*d2^2*m2^2 - C13^2*Pi2^2*d1^2*m3^2 + C13^2*Pi2^2*d2^2*m2^2 + C13^2*Pi1^2*d3^2*m3^2 - C13^2*Pi3^2*d1^2*m3^2 + C13^2*Pi3^2*d2^2*m2^2 + C13^2*Pi2^2*d3^2*m3^2 + C13^2*Pi3^2*d3^2*m3^2 - P13^4*Pi1^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d2^2 - P13^4*Pi2^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d3^2 - P13^2*Pi1^2*d2^2*m2^2 - P13^2*Pi2^2*d2^2*m2^2 + P13^2*Pi3^2*d1^2*m2^2 - P13^2*Pi1^2*d3^2*m3^2 + P13^2*Pi3^2*d1^2*m3^2 - P13^2*Pi2^2*d3^2*m3^2 + 2*C13^3*Pi3*Pi4*d1^4 - 2*P13^3*Pi3^2*d1^3*m2 - 2*C13^3*Pi3*Pi4*d1^2*d3^2 + 2*C13^2*P13*Pi3^2*d1^3*m2 + 2*P13^3*Pi1^2*d1*d2^2*m2 + 2*P13^3*Pi2^2*d1*d2^2*m2 + 2*C11*C13^2*Pi1*Pi4*d1^4 + 2*C11*C13^3*Pi1*Pi3*d1^4 + 2*C12*C13^2*Pi2*Pi4*d1^4 + 2*C12*C13^3*Pi2*Pi3*d1^4 - 2*C13*P13^2*Pi3*Pi4*d1^4 - C11^2*C13^2*Pi1^2*d1^2*d3^2 - C12^2*C13^2*Pi2^2*d1^2*d3^2 + C11^2*P13^2*Pi1^2*d1^2*d2^2 + C11^2*P13^2*Pi1^2*d1^2*d3^2 + C12^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi1^2*d1^2*d2^2 + C12^2*P13^2*Pi2^2*d1^2*d3^2 + C13^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*C13^2*Pi1^2*d2*d3*m2*m3 + 2*C13^2*Pi2^2*d2*d3*m2*m3 + 2*C13^2*Pi3^2*d2*d3*m2*m3 + 2*P13^3*Pi1^2*d1*d2*d3*m3 + 2*P13^3*Pi2^2*d1*d2*d3*m3 - 2*P13^2*Pi1^2*d2*d3*m2*m3 - 2*P13^2*Pi2^2*d2*d3*m2*m3 - 2*C11*C13^2*Pi1*Pi4*d1^2*d3^2 - 2*C11*C13^3*Pi1*Pi3*d1^2*d3^2 - 2*C12*C13^2*Pi2*Pi4*d1^2*d3^2 - 2*C12*C13^3*Pi2*Pi3*d1^2*d3^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*C13*P13^2*Pi3*Pi4*d1^2*d3^2 - 2*C13^2*P13*Pi1^2*d1*d2^2*m2 - 2*C13^2*P13*Pi2^2*d1*d2^2*m2 + 2*C13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*C12*C13^2*Pi1*Pi2*d1^4 - 2*C11*C13*P13^2*Pi1*Pi3*d1^4 - 2*C12*C13*P13^2*Pi2*Pi3*d1^4 + 2*C11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*C12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*P13*Pi3*Pi4*d1*d2^2*m2 - 2*C13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*C13^2*P13*Pi2^2*d1*d2*d3*m3 - 2*C11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*C13*P13*Pi2*Pi3*d1*d2*d3*m3)) + 8*C13*D13*P13^4*d1^2*((D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3)^2 + 2*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3)*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3)) + 8*D13^2*P13^4*d1^2*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3)*(D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3) + 4*P13^4*d1^2*(C13 - P13)*(2*D13*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)^2*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3) + 2*d1^2*d3*(D11*Pi1 + D12*Pi2 + D13*Pi3)*(2*D13*Pi4 + 2*C11*D13*Pi1 + C13*D11*Pi1 + 2*C12*D13*Pi2 + C13*D12*Pi2 + 3*C13*D13*Pi3)*(D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3))*(C13 + P13);
coef7 = P13^4*((2*C13*D13*Pi4^2*d1^4 + 4*C13^3*D13*Pi3^2*d1^4 - 4*C13*D13*P13^2*Pi3^2*d1^4 - 2*C13*D13*Pi4^2*d1^2*d3^2 - 2*C13*D13*Pi1^2*d1^2*m3^2 + 2*C13*D13*Pi1^2*d2^2*m2^2 - 2*C13*D13*Pi2^2*d1^2*m3^2 + 2*C13*D13*Pi2^2*d2^2*m2^2 + 2*C13*D13*Pi1^2*d3^2*m3^2 - 2*C13*D13*Pi3^2*d1^2*m3^2 + 2*C13*D13*Pi3^2*d2^2*m2^2 + 2*C13*D13*Pi2^2*d3^2*m3^2 + 2*C13*D13*Pi3^2*d3^2*m3^2 - 4*C13^3*D13*Pi3^2*d1^2*d3^2 + 2*C13^2*D11*Pi1*Pi4*d1^4 + 2*C13^3*D11*Pi1*Pi3*d1^4 + 2*C13^2*D12*Pi2*Pi4*d1^4 + 2*C13^3*D12*Pi2*Pi3*d1^4 + 6*C13^2*D13*Pi3*Pi4*d1^4 - 2*D13*P13^2*Pi3*Pi4*d1^4 + 2*C11*C13^2*D11*Pi1^2*d1^4 + 2*C11^2*C13*D13*Pi1^2*d1^4 + 2*C12*C13^2*D12*Pi2^2*d1^4 + 2*C12^2*C13*D13*Pi2^2*d1^4 + 4*C13*D13*P13*Pi3^2*d1^3*m2 - 2*C13^2*D11*Pi1*Pi4*d1^2*d3^2 - 2*C13^3*D11*Pi1*Pi3*d1^2*d3^2 - 2*C13^2*D12*Pi2*Pi4*d1^2*d3^2 - 2*C13^3*D12*Pi2*Pi3*d1^2*d3^2 - 6*C13^2*D13*Pi3*Pi4*d1^2*d3^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*D13*P13^2*Pi3*Pi4*d1^2*d3^2 + 4*C11*C13*D13*Pi1*Pi4*d1^4 + 4*C12*C13*D13*Pi2*Pi4*d1^4 - 2*C11*C13^2*D11*Pi1^2*d1^2*d3^2 - 2*C11^2*C13*D13*Pi1^2*d1^2*d3^2 - 2*C12*C13^2*D12*Pi2^2*d1^2*d3^2 - 2*C12^2*C13*D13*Pi2^2*d1^2*d3^2 + 2*D13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d2^2 + 2*C11*D11*P13^2*Pi1^2*d1^2*d3^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d2^2 + 2*C12*D12*P13^2*Pi2^2*d1^2*d3^2 + 2*C13*D13*P13^2*Pi1^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi2^2*d1^2*d2^2 + 2*C13*D13*P13^2*Pi3^2*d1^2*d3^2 + 2*C11*C13^2*D12*Pi1*Pi2*d1^4 + 2*C12*C13^2*D11*Pi1*Pi2*d1^4 + 6*C11*C13^2*D13*Pi1*Pi3*d1^4 + 6*C12*C13^2*D13*Pi2*Pi3*d1^4 - 2*C11*D13*P13^2*Pi1*Pi3*d1^4 - 2*C13*D11*P13^2*Pi1*Pi3*d1^4 - 2*C12*D13*P13^2*Pi2*Pi3*d1^4 - 2*C13*D12*P13^2*Pi2*Pi3*d1^4 + 2*C11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*C13*D11*P13*Pi1*Pi3*d1^3*m2 + 2*C12*D13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*D12*P13*Pi2*Pi3*d1^3*m2 + 2*D13*P13*Pi3*Pi4*d1*d2^2*m2 + 4*C13*D13*Pi1^2*d2*d3*m2*m3 + 4*C13*D13*Pi2^2*d2*d3*m2*m3 + 4*C13*D13*Pi3^2*d2*d3*m2*m3 - 4*C11*C13*D13*Pi1*Pi4*d1^2*d3^2 - 4*C12*C13*D13*Pi2*Pi4*d1^2*d3^2 - 4*C13*D13*P13*Pi1^2*d1*d2^2*m2 - 4*C13*D13*P13*Pi2^2*d1*d2^2*m2 - 2*C11*C13^2*D12*Pi1*Pi2*d1^2*d3^2 - 2*C12*C13^2*D11*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13^2*D13*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13^2*D13*Pi2*Pi3*d1^2*d3^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C12*D11*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C13*D11*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*D12*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C12*C13*D13*Pi1*Pi2*d1^4 + 2*D13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C13*D11*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*D13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C13*D12*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C13*D13*P13*Pi1^2*d1*d2*d3*m3 - 4*C13*D13*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C12*C13*D13*Pi1*Pi2*d1^2*d3^2 + 2*C11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C13*D11*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*D13*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*C13*D12*P13*Pi2*Pi3*d1*d2*d3*m3)^2 + 2*(D13^2*Pi4^2*d1^4 + C11^2*D13^2*Pi1^2*d1^4 + C13^2*D11^2*Pi1^2*d1^4 + C12^2*D13^2*Pi2^2*d1^4 + C13^2*D12^2*Pi2^2*d1^4 + 6*C13^2*D13^2*Pi3^2*d1^4 - 2*D13^2*P13^2*Pi3^2*d1^4 - D13^2*Pi4^2*d1^2*d3^2 - D13^2*Pi1^2*d1^2*m3^2 + D13^2*Pi1^2*d2^2*m2^2 - D13^2*Pi2^2*d1^2*m3^2 + D13^2*Pi2^2*d2^2*m2^2 + D13^2*Pi1^2*d3^2*m3^2 - D13^2*Pi3^2*d1^2*m3^2 + D13^2*Pi3^2*d2^2*m2^2 + D13^2*Pi2^2*d3^2*m3^2 + D13^2*Pi3^2*d3^2*m3^2 + 2*D13^2*P13*Pi3^2*d1^3*m2 + 2*C11*D13^2*Pi1*Pi4*d1^4 + 2*C12*D13^2*Pi2*Pi4*d1^4 + 6*C13*D13^2*Pi3*Pi4*d1^4 - C11^2*D13^2*Pi1^2*d1^2*d3^2 - C13^2*D11^2*Pi1^2*d1^2*d3^2 - C12^2*D13^2*Pi2^2*d1^2*d3^2 - C13^2*D12^2*Pi2^2*d1^2*d3^2 - 6*C13^2*D13^2*Pi3^2*d1^2*d3^2 + D11^2*P13^2*Pi1^2*d1^2*d2^2 + D11^2*P13^2*Pi1^2*d1^2*d3^2 + D12^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi1^2*d1^2*d2^2 + D12^2*P13^2*Pi2^2*d1^2*d3^2 + D13^2*P13^2*Pi2^2*d1^2*d2^2 + D13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*D13^2*Pi1^2*d2*d3*m2*m3 + 2*D13^2*Pi2^2*d2*d3*m2*m3 + 2*D13^2*Pi3^2*d2*d3*m2*m3 - 2*C11*D13^2*Pi1*Pi4*d1^2*d3^2 - 2*C12*D13^2*Pi2*Pi4*d1^2*d3^2 - 6*C13*D13^2*Pi3*Pi4*d1^2*d3^2 + 4*C13*D11*D13*Pi1*Pi4*d1^4 + 4*C13*D12*D13*Pi2*Pi4*d1^4 - 2*D13^2*P13*Pi1^2*d1*d2^2*m2 - 2*D13^2*P13*Pi2^2*d1*d2^2*m2 + 4*C11*C13*D11*D13*Pi1^2*d1^4 + 4*C12*C13*D12*D13*Pi2^2*d1^4 + 2*C11*C12*D13^2*Pi1*Pi2*d1^4 + 6*C11*C13*D13^2*Pi1*Pi3*d1^4 + 6*C12*C13*D13^2*Pi2*Pi3*d1^4 + 2*C13^2*D11*D12*Pi1*Pi2*d1^4 + 6*C13^2*D11*D13*Pi1*Pi3*d1^4 + 6*C13^2*D12*D13*Pi2*Pi3*d1^4 - 2*D11*D13*P13^2*Pi1*Pi3*d1^4 - 2*D12*D13*P13^2*Pi2*Pi3*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1^3*m2 + 2*D12*D13*P13*Pi2*Pi3*d1^3*m2 - 4*C13*D11*D13*Pi1*Pi4*d1^2*d3^2 - 4*C13*D12*D13*Pi2*Pi4*d1^2*d3^2 - 2*D13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*D13^2*P13*Pi2^2*d1*d2*d3*m3 - 4*C11*C13*D11*D13*Pi1^2*d1^2*d3^2 - 4*C12*C13*D12*D13*Pi2^2*d1^2*d3^2 - 2*C11*C12*D13^2*Pi1*Pi2*d1^2*d3^2 - 6*C11*C13*D13^2*Pi1*Pi3*d1^2*d3^2 - 6*C12*C13*D13^2*Pi2*Pi3*d1^2*d3^2 - 2*C13^2*D11*D12*Pi1*Pi2*d1^2*d3^2 - 6*C13^2*D11*D13*Pi1*Pi3*d1^2*d3^2 - 6*C13^2*D12*D13*Pi2*Pi3*d1^2*d3^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*D12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D12*D13*P13^2*Pi2*Pi3*d1^2*d3^2 + 4*C11*C13*D12*D13*Pi1*Pi2*d1^4 + 4*C12*C13*D11*D13*Pi1*Pi2*d1^4 + 2*D11*D13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D12*D13*P13*Pi2*Pi3*d1*d2^2*m2 - 4*C11*C13*D12*D13*Pi1*Pi2*d1^2*d3^2 - 4*C12*C13*D11*D13*Pi1*Pi2*d1^2*d3^2 + 2*D11*D13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*D12*D13*P13*Pi2*Pi3*d1*d2*d3*m3)*(C13^2*Pi4^2*d1^4 + C13^4*Pi3^2*d1^4 + P13^4*Pi3^2*d1^4 + C11^2*C13^2*Pi1^2*d1^4 + C12^2*C13^2*Pi2^2*d1^4 - 2*C13^2*P13^2*Pi3^2*d1^4 - C13^2*Pi4^2*d1^2*d3^2 - C13^4*Pi3^2*d1^2*d3^2 - C13^2*Pi1^2*d1^2*m3^2 + C13^2*Pi1^2*d2^2*m2^2 - C13^2*Pi2^2*d1^2*m3^2 + C13^2*Pi2^2*d2^2*m2^2 + C13^2*Pi1^2*d3^2*m3^2 - C13^2*Pi3^2*d1^2*m3^2 + C13^2*Pi3^2*d2^2*m2^2 + C13^2*Pi2^2*d3^2*m3^2 + C13^2*Pi3^2*d3^2*m3^2 - P13^4*Pi1^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d2^2 - P13^4*Pi2^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d3^2 - P13^2*Pi1^2*d2^2*m2^2 - P13^2*Pi2^2*d2^2*m2^2 + P13^2*Pi3^2*d1^2*m2^2 - P13^2*Pi1^2*d3^2*m3^2 + P13^2*Pi3^2*d1^2*m3^2 - P13^2*Pi2^2*d3^2*m3^2 + 2*C13^3*Pi3*Pi4*d1^4 - 2*P13^3*Pi3^2*d1^3*m2 - 2*C13^3*Pi3*Pi4*d1^2*d3^2 + 2*C13^2*P13*Pi3^2*d1^3*m2 + 2*P13^3*Pi1^2*d1*d2^2*m2 + 2*P13^3*Pi2^2*d1*d2^2*m2 + 2*C11*C13^2*Pi1*Pi4*d1^4 + 2*C11*C13^3*Pi1*Pi3*d1^4 + 2*C12*C13^2*Pi2*Pi4*d1^4 + 2*C12*C13^3*Pi2*Pi3*d1^4 - 2*C13*P13^2*Pi3*Pi4*d1^4 - C11^2*C13^2*Pi1^2*d1^2*d3^2 - C12^2*C13^2*Pi2^2*d1^2*d3^2 + C11^2*P13^2*Pi1^2*d1^2*d2^2 + C11^2*P13^2*Pi1^2*d1^2*d3^2 + C12^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi1^2*d1^2*d2^2 + C12^2*P13^2*Pi2^2*d1^2*d3^2 + C13^2*P13^2*Pi2^2*d1^2*d2^2 + C13^2*P13^2*Pi3^2*d1^2*d3^2 + 2*C13^2*Pi1^2*d2*d3*m2*m3 + 2*C13^2*Pi2^2*d2*d3*m2*m3 + 2*C13^2*Pi3^2*d2*d3*m2*m3 + 2*P13^3*Pi1^2*d1*d2*d3*m3 + 2*P13^3*Pi2^2*d1*d2*d3*m3 - 2*P13^2*Pi1^2*d2*d3*m2*m3 - 2*P13^2*Pi2^2*d2*d3*m2*m3 - 2*C11*C13^2*Pi1*Pi4*d1^2*d3^2 - 2*C11*C13^3*Pi1*Pi3*d1^2*d3^2 - 2*C12*C13^2*Pi2*Pi4*d1^2*d3^2 - 2*C12*C13^3*Pi2*Pi3*d1^2*d3^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d3^2 + 2*C13*P13^2*Pi3*Pi4*d1^2*d3^2 - 2*C13^2*P13*Pi1^2*d1*d2^2*m2 - 2*C13^2*P13*Pi2^2*d1*d2^2*m2 + 2*C13*P13*Pi3*Pi4*d1^3*m2 + 2*C11*C12*C13^2*Pi1*Pi2*d1^4 - 2*C11*C13*P13^2*Pi1*Pi3*d1^4 - 2*C12*C13*P13^2*Pi2*Pi3*d1^4 + 2*C11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*C12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*C13*P13*Pi3*Pi4*d1*d2^2*m2 - 2*C13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*C13^2*P13*Pi2^2*d1*d2*d3*m3 - 2*C11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C13*P13*Pi3*Pi4*d1*d2*d3*m3 + 2*C11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C12*C13*P13*Pi2*Pi3*d1*d2*d3*m3)) + 8*(D13*P13^4*d1^2*(C13 + P13) + D13*P13^4*d1^2*(C13 - P13))*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3)*(D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3) + 4*D13^2*P13^4*d1^2*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3)^2 + 4*P13^4*d1^2*(C13 - P13)*((D13*Pi4^2*d1^2*d3 - D13*Pi1^2*d3*m3^2 - D13*Pi2^2*d3*m3^2 - D13*Pi3^2*d3*m3^2 + C11^2*D13*Pi1^2*d1^2*d3 + C12^2*D13*Pi2^2*d1^2*d3 + 3*C13^2*D13*Pi3^2*d1^2*d3 - D13*P13^2*Pi3^2*d1^2*d3 - D13*Pi1^2*d2*m2*m3 - D13*Pi2^2*d2*m2*m3 - D13*Pi3^2*d2*m2*m3 + 2*C11*C13*D11*Pi1^2*d1^2*d3 + 2*C12*C13*D12*Pi2^2*d1^2*d3 + 2*C13^2*D11*Pi1*Pi3*d1^2*d3 + 2*C13^2*D12*Pi2*Pi3*d1^2*d3 - D11*P13^2*Pi1*Pi3*d1^2*d3 - D12*P13^2*Pi2*Pi3*d1^2*d3 + 2*C11*D13*Pi1*Pi4*d1^2*d3 + 2*C13*D11*Pi1*Pi4*d1^2*d3 + 2*C12*D13*Pi2*Pi4*d1^2*d3 + 2*C13*D12*Pi2*Pi4*d1^2*d3 + 4*C13*D13*Pi3*Pi4*d1^2*d3 + D13*P13*Pi1^2*d1*d2*m3 + D13*P13*Pi2^2*d1*d2*m3 + D13*P13*Pi3^2*d1*d3*m2 - D11*P13*Pi1*Pi3*d1*d2*m3 + D11*P13*Pi1*Pi3*d1*d3*m2 - D12*P13*Pi2*Pi3*d1*d2*m3 + D12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*D13*Pi1*Pi2*d1^2*d3 + 2*C11*C13*D12*Pi1*Pi2*d1^2*d3 + 2*C12*C13*D11*Pi1*Pi2*d1^2*d3 + 4*C11*C13*D13*Pi1*Pi3*d1^2*d3 + 4*C12*C13*D13*Pi2*Pi3*d1^2*d3)^2 + 2*(C13*D11^2*Pi1^2*d1^2*d3 + C13*D12^2*Pi2^2*d1^2*d3 + 3*C13*D13^2*Pi3^2*d1^2*d3 + 2*D13^2*Pi3*Pi4*d1^2*d3 + 2*C11*D11*D13*Pi1^2*d1^2*d3 + 2*C12*D12*D13*Pi2^2*d1^2*d3 + 2*C11*D13^2*Pi1*Pi3*d1^2*d3 + 2*C12*D13^2*Pi2*Pi3*d1^2*d3 + 2*D11*D13*Pi1*Pi4*d1^2*d3 + 2*D12*D13*Pi2*Pi4*d1^2*d3 + 2*C11*D12*D13*Pi1*Pi2*d1^2*d3 + 2*C12*D11*D13*Pi1*Pi2*d1^2*d3 + 2*C13*D11*D12*Pi1*Pi2*d1^2*d3 + 4*C13*D11*D13*Pi1*Pi3*d1^2*d3 + 4*C13*D12*D13*Pi2*Pi3*d1^2*d3)*(C13*Pi4^2*d1^2*d3 - C13*Pi1^2*d3*m3^2 - C13*Pi2^2*d3*m3^2 - C13*Pi3^2*d3*m3^2 + C13^3*Pi3^2*d1^2*d3 + C11^2*C13*Pi1^2*d1^2*d3 + C12^2*C13*Pi2^2*d1^2*d3 - C13*P13^2*Pi3^2*d1^2*d3 - C13*Pi1^2*d2*m2*m3 - C13*Pi2^2*d2*m2*m3 - C13*Pi3^2*d2*m2*m3 + 2*C13^2*Pi3*Pi4*d1^2*d3 - P13^2*Pi3*Pi4*d1^2*d3 + 2*C11*C13^2*Pi1*Pi3*d1^2*d3 + 2*C12*C13^2*Pi2*Pi3*d1^2*d3 - C11*P13^2*Pi1*Pi3*d1^2*d3 - C12*P13^2*Pi2*Pi3*d1^2*d3 - P13*Pi3*Pi4*d1*d2*m3 + P13*Pi3*Pi4*d1*d3*m2 + 2*C11*C13*Pi1*Pi4*d1^2*d3 + 2*C12*C13*Pi2*Pi4*d1^2*d3 + C13*P13*Pi1^2*d1*d2*m3 + C13*P13*Pi2^2*d1*d2*m3 + C13*P13*Pi3^2*d1*d3*m2 - C11*P13*Pi1*Pi3*d1*d2*m3 + C11*P13*Pi1*Pi3*d1*d3*m2 - C12*P13*Pi2*Pi3*d1*d2*m3 + C12*P13*Pi2*Pi3*d1*d3*m2 + 2*C11*C12*C13*Pi1*Pi2*d1^2*d3))*(C13 + P13);
coef8 = 2*P13^4*(C11^2*C13^2*Pi1^2*d1^4 - C11^2*C13^2*Pi1^2*d1^2*d3^2 + C11^2*P13^2*Pi1^2*d1^2*d2^2 + C11^2*P13^2*Pi1^2*d1^2*d3^2 + 2*C11*C12*C13^2*Pi1*Pi2*d1^4 - 2*C11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C13^3*Pi1*Pi3*d1^4 - 2*C11*C13^3*Pi1*Pi3*d1^2*d3^2 + 2*C11*C13^2*Pi1*Pi4*d1^4 - 2*C11*C13^2*Pi1*Pi4*d1^2*d3^2 - 2*C11*C13*P13^2*Pi1*Pi3*d1^4 + 2*C11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d3^2 + C12^2*C13^2*Pi2^2*d1^4 - C12^2*C13^2*Pi2^2*d1^2*d3^2 + C12^2*P13^2*Pi2^2*d1^2*d2^2 + C12^2*P13^2*Pi2^2*d1^2*d3^2 + 2*C12*C13^3*Pi2*Pi3*d1^4 - 2*C12*C13^3*Pi2*Pi3*d1^2*d3^2 + 2*C12*C13^2*Pi2*Pi4*d1^4 - 2*C12*C13^2*Pi2*Pi4*d1^2*d3^2 - 2*C12*C13*P13^2*Pi2*Pi3*d1^4 + 2*C12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*C12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d3^2 + C13^4*Pi3^2*d1^4 - C13^4*Pi3^2*d1^2*d3^2 + 2*C13^3*Pi3*Pi4*d1^4 - 2*C13^3*Pi3*Pi4*d1^2*d3^2 + C13^2*P13^2*Pi1^2*d1^2*d2^2 + C13^2*P13^2*Pi2^2*d1^2*d2^2 - 2*C13^2*P13^2*Pi3^2*d1^4 + C13^2*P13^2*Pi3^2*d1^2*d3^2 - 2*C13^2*P13*Pi1^2*d1*d2^2*m2 - 2*C13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*C13^2*P13*Pi2^2*d1*d2^2*m2 - 2*C13^2*P13*Pi2^2*d1*d2*d3*m3 + 2*C13^2*P13*Pi3^2*d1^3*m2 - C13^2*Pi1^2*d1^2*m3^2 + C13^2*Pi1^2*d2^2*m2^2 + 2*C13^2*Pi1^2*d2*d3*m2*m3 + C13^2*Pi1^2*d3^2*m3^2 - C13^2*Pi2^2*d1^2*m3^2 + C13^2*Pi2^2*d2^2*m2^2 + 2*C13^2*Pi2^2*d2*d3*m2*m3 + C13^2*Pi2^2*d3^2*m3^2 - C13^2*Pi3^2*d1^2*m3^2 + C13^2*Pi3^2*d2^2*m2^2 + 2*C13^2*Pi3^2*d2*d3*m2*m3 + C13^2*Pi3^2*d3^2*m3^2 + C13^2*Pi4^2*d1^4 - C13^2*Pi4^2*d1^2*d3^2 - 2*C13*P13^2*Pi3*Pi4*d1^4 + 2*C13*P13^2*Pi3*Pi4*d1^2*d3^2 + 2*C13*P13*Pi3*Pi4*d1^3*m2 + 2*C13*P13*Pi3*Pi4*d1*d2^2*m2 + 2*C13*P13*Pi3*Pi4*d1*d2*d3*m3 - P13^4*Pi1^2*d1^2*d2^2 - P13^4*Pi2^2*d1^2*d2^2 + P13^4*Pi3^2*d1^4 + 2*P13^3*Pi1^2*d1*d2^2*m2 + 2*P13^3*Pi1^2*d1*d2*d3*m3 + 2*P13^3*Pi2^2*d1*d2^2*m2 + 2*P13^3*Pi2^2*d1*d2*d3*m3 - 2*P13^3*Pi3^2*d1^3*m2 - P13^2*Pi1^2*d2^2*m2^2 - 2*P13^2*Pi1^2*d2*d3*m2*m3 - P13^2*Pi1^2*d3^2*m3^2 - P13^2*Pi2^2*d2^2*m2^2 - 2*P13^2*Pi2^2*d2*d3*m2*m3 - P13^2*Pi2^2*d3^2*m3^2 + P13^2*Pi3^2*d1^2*m2^2 + P13^2*Pi3^2*d1^2*m3^2 + P13^2*Pi4^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d3^2)*(2*D13*C11^2*C13*Pi1^2*d1^4 - 2*D13*C11^2*C13*Pi1^2*d1^2*d3^2 + 4*D13*C11*C12*C13*Pi1*Pi2*d1^4 - 4*D13*C11*C12*C13*Pi1*Pi2*d1^2*d3^2 + 2*D11*C11*C13^2*Pi1^2*d1^4 - 2*D11*C11*C13^2*Pi1^2*d1^2*d3^2 + 2*D12*C11*C13^2*Pi1*Pi2*d1^4 - 2*D12*C11*C13^2*Pi1*Pi2*d1^2*d3^2 + 6*D13*C11*C13^2*Pi1*Pi3*d1^4 - 6*D13*C11*C13^2*Pi1*Pi3*d1^2*d3^2 + 4*D13*C11*C13*Pi1*Pi4*d1^4 - 4*D13*C11*C13*Pi1*Pi4*d1^2*d3^2 + 2*D11*C11*P13^2*Pi1^2*d1^2*d2^2 + 2*D11*C11*P13^2*Pi1^2*d1^2*d3^2 + 2*D12*C11*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D12*C11*P13^2*Pi1*Pi2*d1^2*d3^2 - 2*D13*C11*P13^2*Pi1*Pi3*d1^4 + 2*D13*C11*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D13*C11*P13*Pi1*Pi3*d1^3*m2 + 2*D13*C11*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D13*C11*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*D13*C12^2*C13*Pi2^2*d1^4 - 2*D13*C12^2*C13*Pi2^2*d1^2*d3^2 + 2*D11*C12*C13^2*Pi1*Pi2*d1^4 - 2*D11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*D12*C12*C13^2*Pi2^2*d1^4 - 2*D12*C12*C13^2*Pi2^2*d1^2*d3^2 + 6*D13*C12*C13^2*Pi2*Pi3*d1^4 - 6*D13*C12*C13^2*Pi2*Pi3*d1^2*d3^2 + 4*D13*C12*C13*Pi2*Pi4*d1^4 - 4*D13*C12*C13*Pi2*Pi4*d1^2*d3^2 + 2*D11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*D11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*D12*C12*P13^2*Pi2^2*d1^2*d2^2 + 2*D12*C12*P13^2*Pi2^2*d1^2*d3^2 - 2*D13*C12*P13^2*Pi2*Pi3*d1^4 + 2*D13*C12*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*D13*C12*P13*Pi2*Pi3*d1^3*m2 + 2*D13*C12*P13*Pi2*Pi3*d1*d2^2*m2 + 2*D13*C12*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*D11*C13^3*Pi1*Pi3*d1^4 - 2*D11*C13^3*Pi1*Pi3*d1^2*d3^2 + 2*D12*C13^3*Pi2*Pi3*d1^4 - 2*D12*C13^3*Pi2*Pi3*d1^2*d3^2 + 4*D13*C13^3*Pi3^2*d1^4 - 4*D13*C13^3*Pi3^2*d1^2*d3^2 + 2*D11*C13^2*Pi1*Pi4*d1^4 - 2*D11*C13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*C13^2*Pi2*Pi4*d1^4 - 2*D12*C13^2*Pi2*Pi4*d1^2*d3^2 + 6*D13*C13^2*Pi3*Pi4*d1^4 - 6*D13*C13^2*Pi3*Pi4*d1^2*d3^2 + 2*D13*C13*P13^2*Pi1^2*d1^2*d2^2 - 2*D11*C13*P13^2*Pi1*Pi3*d1^4 + 2*D11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*D13*C13*P13^2*Pi2^2*d1^2*d2^2 - 2*D12*C13*P13^2*Pi2*Pi3*d1^4 + 2*D12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 - 4*D13*C13*P13^2*Pi3^2*d1^4 + 2*D13*C13*P13^2*Pi3^2*d1^2*d3^2 - 4*D13*C13*P13*Pi1^2*d1*d2^2*m2 - 4*D13*C13*P13*Pi1^2*d1*d2*d3*m3 + 2*D11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*D11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*D11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 - 4*D13*C13*P13*Pi2^2*d1*d2^2*m2 - 4*D13*C13*P13*Pi2^2*d1*d2*d3*m3 + 2*D12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*D12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*D12*C13*P13*Pi2*Pi3*d1*d2*d3*m3 + 4*D13*C13*P13*Pi3^2*d1^3*m2 - 2*D13*C13*Pi1^2*d1^2*m3^2 + 2*D13*C13*Pi1^2*d2^2*m2^2 + 4*D13*C13*Pi1^2*d2*d3*m2*m3 + 2*D13*C13*Pi1^2*d3^2*m3^2 - 2*D13*C13*Pi2^2*d1^2*m3^2 + 2*D13*C13*Pi2^2*d2^2*m2^2 + 4*D13*C13*Pi2^2*d2*d3*m2*m3 + 2*D13*C13*Pi2^2*d3^2*m3^2 - 2*D13*C13*Pi3^2*d1^2*m3^2 + 2*D13*C13*Pi3^2*d2^2*m2^2 + 4*D13*C13*Pi3^2*d2*d3*m2*m3 + 2*D13*C13*Pi3^2*d3^2*m3^2 + 2*D13*C13*Pi4^2*d1^4 - 2*D13*C13*Pi4^2*d1^2*d3^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*D11*P13^2*Pi1*Pi4*d1^2*d3^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*D12*P13^2*Pi2*Pi4*d1^2*d3^2 - 2*D13*P13^2*Pi3*Pi4*d1^4 + 2*D13*P13^2*Pi3*Pi4*d1^2*d3^2 + 2*D13*P13*Pi3*Pi4*d1^3*m2 + 2*D13*P13*Pi3*Pi4*d1*d2^2*m2 + 2*D13*P13*Pi3*Pi4*d1*d2*d3*m3) + 8*C13*D13*P13^4*d1^2*(d3*C11^2*C13*Pi1^2*d1^2 + 2*d3*C11*C12*C13*Pi1*Pi2*d1^2 + 2*d3*C11*C13^2*Pi1*Pi3*d1^2 + 2*d3*C11*C13*Pi1*Pi4*d1^2 - d3*C11*P13^2*Pi1*Pi3*d1^2 - d2*C11*P13*Pi1*Pi3*d1*m3 + d3*m2*C11*P13*Pi1*Pi3*d1 + d3*C12^2*C13*Pi2^2*d1^2 + 2*d3*C12*C13^2*Pi2*Pi3*d1^2 + 2*d3*C12*C13*Pi2*Pi4*d1^2 - d3*C12*P13^2*Pi2*Pi3*d1^2 - d2*C12*P13*Pi2*Pi3*d1*m3 + d3*m2*C12*P13*Pi2*Pi3*d1 + d3*C13^3*Pi3^2*d1^2 + 2*d3*C13^2*Pi3*Pi4*d1^2 - d3*C13*P13^2*Pi3^2*d1^2 + d2*C13*P13*Pi1^2*d1*m3 + d2*C13*P13*Pi2^2*d1*m3 + d3*m2*C13*P13*Pi3^2*d1 - d3*C13*Pi1^2*m3^2 - d2*m2*C13*Pi1^2*m3 - d3*C13*Pi2^2*m3^2 - d2*m2*C13*Pi2^2*m3 - d3*C13*Pi3^2*m3^2 - d2*m2*C13*Pi3^2*m3 + d3*C13*Pi4^2*d1^2 - d3*P13^2*Pi3*Pi4*d1^2 - d2*P13*Pi3*Pi4*d1*m3 + d3*m2*P13*Pi3*Pi4*d1)^2 + 8*P13^4*d1^2*(C13 - P13)*(C13 + P13)*(d3*C11^2*C13*Pi1^2*d1^2 + 2*d3*C11*C12*C13*Pi1*Pi2*d1^2 + 2*d3*C11*C13^2*Pi1*Pi3*d1^2 + 2*d3*C11*C13*Pi1*Pi4*d1^2 - d3*C11*P13^2*Pi1*Pi3*d1^2 - d2*C11*P13*Pi1*Pi3*d1*m3 + d3*m2*C11*P13*Pi1*Pi3*d1 + d3*C12^2*C13*Pi2^2*d1^2 + 2*d3*C12*C13^2*Pi2*Pi3*d1^2 + 2*d3*C12*C13*Pi2*Pi4*d1^2 - d3*C12*P13^2*Pi2*Pi3*d1^2 - d2*C12*P13*Pi2*Pi3*d1*m3 + d3*m2*C12*P13*Pi2*Pi3*d1 + d3*C13^3*Pi3^2*d1^2 + 2*d3*C13^2*Pi3*Pi4*d1^2 - d3*C13*P13^2*Pi3^2*d1^2 + d2*C13*P13*Pi1^2*d1*m3 + d2*C13*P13*Pi2^2*d1*m3 + d3*m2*C13*P13*Pi3^2*d1 - d3*C13*Pi1^2*m3^2 - d2*m2*C13*Pi1^2*m3 - d3*C13*Pi2^2*m3^2 - d2*m2*C13*Pi2^2*m3 - d3*C13*Pi3^2*m3^2 - d2*m2*C13*Pi3^2*m3 + d3*C13*Pi4^2*d1^2 - d3*P13^2*Pi3*Pi4*d1^2 - d2*P13*Pi3*Pi4*d1*m3 + d3*m2*P13*Pi3*Pi4*d1)*(D13*d3*C11^2*Pi1^2*d1^2 + 2*D13*d3*C11*C12*Pi1*Pi2*d1^2 + 2*D11*d3*C11*C13*Pi1^2*d1^2 + 2*D12*d3*C11*C13*Pi1*Pi2*d1^2 + 4*D13*d3*C11*C13*Pi1*Pi3*d1^2 + 2*D13*d3*C11*Pi1*Pi4*d1^2 + D13*d3*C12^2*Pi2^2*d1^2 + 2*D11*d3*C12*C13*Pi1*Pi2*d1^2 + 2*D12*d3*C12*C13*Pi2^2*d1^2 + 4*D13*d3*C12*C13*Pi2*Pi3*d1^2 + 2*D13*d3*C12*Pi2*Pi4*d1^2 + 2*D11*d3*C13^2*Pi1*Pi3*d1^2 + 2*D12*d3*C13^2*Pi2*Pi3*d1^2 + 3*D13*d3*C13^2*Pi3^2*d1^2 + 2*D11*d3*C13*Pi1*Pi4*d1^2 + 2*D12*d3*C13*Pi2*Pi4*d1^2 + 4*D13*d3*C13*Pi3*Pi4*d1^2 - D11*d3*P13^2*Pi1*Pi3*d1^2 - D12*d3*P13^2*Pi2*Pi3*d1^2 - D13*d3*P13^2*Pi3^2*d1^2 + D13*d2*P13*Pi1^2*d1*m3 - D11*d2*P13*Pi1*Pi3*d1*m3 + D11*d3*m2*P13*Pi1*Pi3*d1 + D13*d2*P13*Pi2^2*d1*m3 - D12*d2*P13*Pi2*Pi3*d1*m3 + D12*d3*m2*P13*Pi2*Pi3*d1 + D13*d3*m2*P13*Pi3^2*d1 - D13*d3*Pi1^2*m3^2 - D13*d2*m2*Pi1^2*m3 - D13*d3*Pi2^2*m3^2 - D13*d2*m2*Pi2^2*m3 - D13*d3*Pi3^2*m3^2 - D13*d2*m2*Pi3^2*m3 + D13*d3*Pi4^2*d1^2);
coef9 = P13^4*(C11^2*C13^2*Pi1^2*d1^4 - C11^2*C13^2*Pi1^2*d1^2*d3^2 + C11^2*P13^2*Pi1^2*d1^2*d2^2 + C11^2*P13^2*Pi1^2*d1^2*d3^2 + 2*C11*C12*C13^2*Pi1*Pi2*d1^4 - 2*C11*C12*C13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d2^2 + 2*C11*C12*P13^2*Pi1*Pi2*d1^2*d3^2 + 2*C11*C13^3*Pi1*Pi3*d1^4 - 2*C11*C13^3*Pi1*Pi3*d1^2*d3^2 + 2*C11*C13^2*Pi1*Pi4*d1^4 - 2*C11*C13^2*Pi1*Pi4*d1^2*d3^2 - 2*C11*C13*P13^2*Pi1*Pi3*d1^4 + 2*C11*C13*P13^2*Pi1*Pi3*d1^2*d3^2 + 2*C11*C13*P13*Pi1*Pi3*d1^3*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2^2*m2 + 2*C11*C13*P13*Pi1*Pi3*d1*d2*d3*m3 + 2*C11*P13^2*Pi1*Pi4*d1^2*d2^2 + 2*C11*P13^2*Pi1*Pi4*d1^2*d3^2 + C12^2*C13^2*Pi2^2*d1^4 - C12^2*C13^2*Pi2^2*d1^2*d3^2 + C12^2*P13^2*Pi2^2*d1^2*d2^2 + C12^2*P13^2*Pi2^2*d1^2*d3^2 + 2*C12*C13^3*Pi2*Pi3*d1^4 - 2*C12*C13^3*Pi2*Pi3*d1^2*d3^2 + 2*C12*C13^2*Pi2*Pi4*d1^4 - 2*C12*C13^2*Pi2*Pi4*d1^2*d3^2 - 2*C12*C13*P13^2*Pi2*Pi3*d1^4 + 2*C12*C13*P13^2*Pi2*Pi3*d1^2*d3^2 + 2*C12*C13*P13*Pi2*Pi3*d1^3*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2^2*m2 + 2*C12*C13*P13*Pi2*Pi3*d1*d2*d3*m3 + 2*C12*P13^2*Pi2*Pi4*d1^2*d2^2 + 2*C12*P13^2*Pi2*Pi4*d1^2*d3^2 + C13^4*Pi3^2*d1^4 - C13^4*Pi3^2*d1^2*d3^2 + 2*C13^3*Pi3*Pi4*d1^4 - 2*C13^3*Pi3*Pi4*d1^2*d3^2 + C13^2*P13^2*Pi1^2*d1^2*d2^2 + C13^2*P13^2*Pi2^2*d1^2*d2^2 - 2*C13^2*P13^2*Pi3^2*d1^4 + C13^2*P13^2*Pi3^2*d1^2*d3^2 - 2*C13^2*P13*Pi1^2*d1*d2^2*m2 - 2*C13^2*P13*Pi1^2*d1*d2*d3*m3 - 2*C13^2*P13*Pi2^2*d1*d2^2*m2 - 2*C13^2*P13*Pi2^2*d1*d2*d3*m3 + 2*C13^2*P13*Pi3^2*d1^3*m2 - C13^2*Pi1^2*d1^2*m3^2 + C13^2*Pi1^2*d2^2*m2^2 + 2*C13^2*Pi1^2*d2*d3*m2*m3 + C13^2*Pi1^2*d3^2*m3^2 - C13^2*Pi2^2*d1^2*m3^2 + C13^2*Pi2^2*d2^2*m2^2 + 2*C13^2*Pi2^2*d2*d3*m2*m3 + C13^2*Pi2^2*d3^2*m3^2 - C13^2*Pi3^2*d1^2*m3^2 + C13^2*Pi3^2*d2^2*m2^2 + 2*C13^2*Pi3^2*d2*d3*m2*m3 + C13^2*Pi3^2*d3^2*m3^2 + C13^2*Pi4^2*d1^4 - C13^2*Pi4^2*d1^2*d3^2 - 2*C13*P13^2*Pi3*Pi4*d1^4 + 2*C13*P13^2*Pi3*Pi4*d1^2*d3^2 + 2*C13*P13*Pi3*Pi4*d1^3*m2 + 2*C13*P13*Pi3*Pi4*d1*d2^2*m2 + 2*C13*P13*Pi3*Pi4*d1*d2*d3*m3 - P13^4*Pi1^2*d1^2*d2^2 - P13^4*Pi2^2*d1^2*d2^2 + P13^4*Pi3^2*d1^4 + 2*P13^3*Pi1^2*d1*d2^2*m2 + 2*P13^3*Pi1^2*d1*d2*d3*m3 + 2*P13^3*Pi2^2*d1*d2^2*m2 + 2*P13^3*Pi2^2*d1*d2*d3*m3 - 2*P13^3*Pi3^2*d1^3*m2 - P13^2*Pi1^2*d2^2*m2^2 - 2*P13^2*Pi1^2*d2*d3*m2*m3 - P13^2*Pi1^2*d3^2*m3^2 - P13^2*Pi2^2*d2^2*m2^2 - 2*P13^2*Pi2^2*d2*d3*m2*m3 - P13^2*Pi2^2*d3^2*m3^2 + P13^2*Pi3^2*d1^2*m2^2 + P13^2*Pi3^2*d1^2*m3^2 + P13^2*Pi4^2*d1^2*d2^2 + P13^2*Pi4^2*d1^2*d3^2)^2 + 4*P13^4*d1^2*(C13 - P13)*(C13 + P13)*(d3*C11^2*C13*Pi1^2*d1^2 + 2*d3*C11*C12*C13*Pi1*Pi2*d1^2 + 2*d3*C11*C13^2*Pi1*Pi3*d1^2 + 2*d3*C11*C13*Pi1*Pi4*d1^2 - d3*C11*P13^2*Pi1*Pi3*d1^2 - d2*C11*P13*Pi1*Pi3*d1*m3 + d3*m2*C11*P13*Pi1*Pi3*d1 + d3*C12^2*C13*Pi2^2*d1^2 + 2*d3*C12*C13^2*Pi2*Pi3*d1^2 + 2*d3*C12*C13*Pi2*Pi4*d1^2 - d3*C12*P13^2*Pi2*Pi3*d1^2 - d2*C12*P13*Pi2*Pi3*d1*m3 + d3*m2*C12*P13*Pi2*Pi3*d1 + d3*C13^3*Pi3^2*d1^2 + 2*d3*C13^2*Pi3*Pi4*d1^2 - d3*C13*P13^2*Pi3^2*d1^2 + d2*C13*P13*Pi1^2*d1*m3 + d2*C13*P13*Pi2^2*d1*m3 + d3*m2*C13*P13*Pi3^2*d1 - d3*C13*Pi1^2*m3^2 - d2*m2*C13*Pi1^2*m3 - d3*C13*Pi2^2*m3^2 - d2*m2*C13*Pi2^2*m3 - d3*C13*Pi3^2*m3^2 - d2*m2*C13*Pi3^2*m3 + d3*C13*Pi4^2*d1^2 - d3*P13^2*Pi3*Pi4*d1^2 - d2*P13*Pi3*Pi4*d1*m3 + d3*m2*P13*Pi3*Pi4*d1)^2;


try
    vl1 = roots([coef1 coef2 coef3 coef4 coef5 coef6 coef7 coef8 coef9]);
    vl1 = vl1(vl1==real(vl1));
catch
    sR = [];sT= [];
    return;
end

if isempty(vl1)
    sR = [];sT= [];
    sl1 = [];
    return;
end

sR  = zeros(3,numel(vl1)*3);
sT  = zeros(3,numel(vl1));
sl1 = zeros(1,numel(vl1));

for iter = 1 : numel(vl1)
    
    l1  = vl1(iter);
    c1  = (C13 + D13*l1)/P13;
    s1  = (-(C13 + P13 + D13*l1)*(C13 - P13 + D13*l1))^(1/2)/P13;
    a   = (-(C13 + P13 + D13*l1)*(C13 - P13 + D13*l1))^(1/2)/P13;
    c2  = (C13*P13*Pi2*Pi4*d1^2 - P13^3*Pi2*Pi3*a^2*d1^2 + C13^2*Pi2*Pi3*d1*m2 - P13^2*Pi1*Pi4*d1*d2 + C12*C13*P13*Pi2^2*d1^2 - C11*P13^2*Pi1^2*d1*d2 + C12*D13*P13*Pi2^2*d1^2*l1 + C13*D12*P13*Pi2^2*d1^2*l1 + C12*P13^2*Pi2^2*a*d1*d3 - D11*P13^2*Pi1^2*d1*d2*l1 + D13^2*Pi2*Pi3*d1*l1^2*m2 + P13^2*Pi2*Pi3*a^2*d1*m2 - C13*P13*Pi1*Pi3*d2*m2 - C13*P13*Pi1*Pi3*d3*m3 + D12*D13*P13*Pi2^2*d1^2*l1^2 + C11*C13*P13*Pi1*Pi2*d1^2 - C12*P13^2*Pi1*Pi2*d1*d2 + D13*P13*Pi2*Pi4*d1^2*l1 + P13^2*Pi2*Pi4*a*d1*d3 + P13^2*Pi1*Pi3*a*d1*m3 + C11*D13*P13*Pi1*Pi2*d1^2*l1 + C13*D11*P13*Pi1*Pi2*d1^2*l1 + C11*P13^2*Pi1*Pi2*a*d1*d3 + C13*P13^2*Pi2*Pi3*a*d1*d3 - D12*P13^2*Pi1*Pi2*d1*d2*l1 + D11*D13*P13*Pi1*Pi2*d1^2*l1^2 + D12*P13^2*Pi2^2*a*d1*d3*l1 + 2*C13*D13*Pi2*Pi3*d1*l1*m2 - D13*P13*Pi1*Pi3*d2*l1*m2 - D13*P13*Pi1*Pi3*d3*l1*m3 + D11*P13^2*Pi1*Pi2*a*d1*d3*l1 + D13*P13^2*Pi2*Pi3*a*d1*d3*l1)/(P13*(C13*Pi1^2*d1*m3 + C13*Pi2^2*d1*m3 + D13*Pi1^2*d1*l1*m3 + D13*Pi2^2*d1*l1*m3 + P13*Pi1^2*a*d2*m2 + P13*Pi2^2*a*d2*m2 + P13*Pi1^2*a*d3*m3 + P13*Pi2^2*a*d3*m3 - P13^2*Pi1^2*a*d1*d2 - P13^2*Pi2^2*a*d1*d2));
    s2  = -(C13*P13*Pi1*Pi4*d1^2 - P13^3*Pi1*Pi3*a^2*d1^2 + C13^2*Pi1*Pi3*d1*m2 + P13^2*Pi2*Pi4*d1*d2 + C11*C13*P13*Pi1^2*d1^2 + C12*P13^2*Pi2^2*d1*d2 + C11*D13*P13*Pi1^2*d1^2*l1 + C13*D11*P13*Pi1^2*d1^2*l1 + C11*P13^2*Pi1^2*a*d1*d3 + D12*P13^2*Pi2^2*d1*d2*l1 + D13^2*Pi1*Pi3*d1*l1^2*m2 + P13^2*Pi1*Pi3*a^2*d1*m2 + C13*P13*Pi2*Pi3*d2*m2 + C13*P13*Pi2*Pi3*d3*m3 + D11*D13*P13*Pi1^2*d1^2*l1^2 + C12*C13*P13*Pi1*Pi2*d1^2 + C11*P13^2*Pi1*Pi2*d1*d2 + D13*P13*Pi1*Pi4*d1^2*l1 + P13^2*Pi1*Pi4*a*d1*d3 - P13^2*Pi2*Pi3*a*d1*m3 + C12*D13*P13*Pi1*Pi2*d1^2*l1 + C13*D12*P13*Pi1*Pi2*d1^2*l1 + C12*P13^2*Pi1*Pi2*a*d1*d3 + C13*P13^2*Pi1*Pi3*a*d1*d3 + D11*P13^2*Pi1*Pi2*d1*d2*l1 + D12*D13*P13*Pi1*Pi2*d1^2*l1^2 + D11*P13^2*Pi1^2*a*d1*d3*l1 + 2*C13*D13*Pi1*Pi3*d1*l1*m2 + D13*P13*Pi2*Pi3*d2*l1*m2 + D13*P13*Pi2*Pi3*d3*l1*m3 + D12*P13^2*Pi1*Pi2*a*d1*d3*l1 + D13*P13^2*Pi1*Pi3*a*d1*d3*l1)/(P13*(C13*Pi1^2*d1*m3 + C13*Pi2^2*d1*m3 + D13*Pi1^2*d1*l1*m3 + D13*Pi2^2*d1*l1*m3 + P13*Pi1^2*a*d2*m2 + P13*Pi2^2*a*d2*m2 + P13*Pi1^2*a*d3*m3 + P13*Pi2^2*a*d3*m3 - P13^2*Pi1^2*a*d1*d2 - P13^2*Pi2^2*a*d1*d2));
    t1 = s1*(C13 + D13*l1) - c1*c2*(C11 + D11*l1) - c1*s2*(C12 + D12*l1);
    t2 = s2*(C11 + D11*l1) - c2*(C12 + D12*l1);
    t3 = P13 - c1*(C13 + D13*l1) - c2*s1*(C11 + D11*l1) - s1*s2*(C12 + D12*l1);
    
    if(abs(c2*c2 + s2*s2-1)<1e-3)
            sR(:,(iter-1)*3+1:iter*3) = [ e11*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e31*(c1*f31 - f11*s1) + e21*(c2*f21 + c1*f11*s2 + f31*s1*s2), e12*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e32*(c1*f31 - f11*s1) + e22*(c2*f21 + c1*f11*s2 + f31*s1*s2), e13*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e33*(c1*f31 - f11*s1) + e23*(c2*f21 + c1*f11*s2 + f31*s1*s2);
                e11*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e31*(c1*f32 - f12*s1) + e21*(c2*f22 + c1*f12*s2 + f32*s1*s2), e12*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e32*(c1*f32 - f12*s1) + e22*(c2*f22 + c1*f12*s2 + f32*s1*s2), e13*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e33*(c1*f32 - f12*s1) + e23*(c2*f22 + c1*f12*s2 + f32*s1*s2);
                e11*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e31*(c1*f33 - f13*s1) + e21*(c2*f23 + c1*f13*s2 + f33*s1*s2), e12*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e32*(c1*f33 - f13*s1) + e22*(c2*f23 + c1*f13*s2 + f33*s1*s2), e13*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e33*(c1*f33 - f13*s1) + e23*(c2*f23 + c1*f13*s2 + f33*s1*s2)];
            sT(:,iter) =  [f11*t1 + f21*t2 + f31*t3 - f11*t1_ - f21*t2_ - f31*t3_
                f12*t1 + f22*t2 + f32*t3 - f12*t1_ - f22*t2_ - f32*t3_
                f13*t1 + f23*t2 + f33*t3 - f13*t1_ - f23*t2_ - f33*t3_];
            sl1(iter) = l1;
    end
    
    c1  = (C13 + D13*l1)/P13;
    s1  = -(-(C13 + P13 + D13*l1)*(C13 - P13 + D13*l1))^(1/2)/P13;
    a   = -(-(C13 + P13 + D13*l1)*(C13 - P13 + D13*l1))^(1/2)/P13;
    c2  = (C13*P13*Pi2*Pi4*d1^2 - P13^3*Pi2*Pi3*a^2*d1^2 + C13^2*Pi2*Pi3*d1*m2 - P13^2*Pi1*Pi4*d1*d2 + C12*C13*P13*Pi2^2*d1^2 - C11*P13^2*Pi1^2*d1*d2 + C12*D13*P13*Pi2^2*d1^2*l1 + C13*D12*P13*Pi2^2*d1^2*l1 + C12*P13^2*Pi2^2*a*d1*d3 - D11*P13^2*Pi1^2*d1*d2*l1 + D13^2*Pi2*Pi3*d1*l1^2*m2 + P13^2*Pi2*Pi3*a^2*d1*m2 - C13*P13*Pi1*Pi3*d2*m2 - C13*P13*Pi1*Pi3*d3*m3 + D12*D13*P13*Pi2^2*d1^2*l1^2 + C11*C13*P13*Pi1*Pi2*d1^2 - C12*P13^2*Pi1*Pi2*d1*d2 + D13*P13*Pi2*Pi4*d1^2*l1 + P13^2*Pi2*Pi4*a*d1*d3 + P13^2*Pi1*Pi3*a*d1*m3 + C11*D13*P13*Pi1*Pi2*d1^2*l1 + C13*D11*P13*Pi1*Pi2*d1^2*l1 + C11*P13^2*Pi1*Pi2*a*d1*d3 + C13*P13^2*Pi2*Pi3*a*d1*d3 - D12*P13^2*Pi1*Pi2*d1*d2*l1 + D11*D13*P13*Pi1*Pi2*d1^2*l1^2 + D12*P13^2*Pi2^2*a*d1*d3*l1 + 2*C13*D13*Pi2*Pi3*d1*l1*m2 - D13*P13*Pi1*Pi3*d2*l1*m2 - D13*P13*Pi1*Pi3*d3*l1*m3 + D11*P13^2*Pi1*Pi2*a*d1*d3*l1 + D13*P13^2*Pi2*Pi3*a*d1*d3*l1)/(P13*(C13*Pi1^2*d1*m3 + C13*Pi2^2*d1*m3 + D13*Pi1^2*d1*l1*m3 + D13*Pi2^2*d1*l1*m3 + P13*Pi1^2*a*d2*m2 + P13*Pi2^2*a*d2*m2 + P13*Pi1^2*a*d3*m3 + P13*Pi2^2*a*d3*m3 - P13^2*Pi1^2*a*d1*d2 - P13^2*Pi2^2*a*d1*d2));
    s2  = -(C13*P13*Pi1*Pi4*d1^2 - P13^3*Pi1*Pi3*a^2*d1^2 + C13^2*Pi1*Pi3*d1*m2 + P13^2*Pi2*Pi4*d1*d2 + C11*C13*P13*Pi1^2*d1^2 + C12*P13^2*Pi2^2*d1*d2 + C11*D13*P13*Pi1^2*d1^2*l1 + C13*D11*P13*Pi1^2*d1^2*l1 + C11*P13^2*Pi1^2*a*d1*d3 + D12*P13^2*Pi2^2*d1*d2*l1 + D13^2*Pi1*Pi3*d1*l1^2*m2 + P13^2*Pi1*Pi3*a^2*d1*m2 + C13*P13*Pi2*Pi3*d2*m2 + C13*P13*Pi2*Pi3*d3*m3 + D11*D13*P13*Pi1^2*d1^2*l1^2 + C12*C13*P13*Pi1*Pi2*d1^2 + C11*P13^2*Pi1*Pi2*d1*d2 + D13*P13*Pi1*Pi4*d1^2*l1 + P13^2*Pi1*Pi4*a*d1*d3 - P13^2*Pi2*Pi3*a*d1*m3 + C12*D13*P13*Pi1*Pi2*d1^2*l1 + C13*D12*P13*Pi1*Pi2*d1^2*l1 + C12*P13^2*Pi1*Pi2*a*d1*d3 + C13*P13^2*Pi1*Pi3*a*d1*d3 + D11*P13^2*Pi1*Pi2*d1*d2*l1 + D12*D13*P13*Pi1*Pi2*d1^2*l1^2 + D11*P13^2*Pi1^2*a*d1*d3*l1 + 2*C13*D13*Pi1*Pi3*d1*l1*m2 + D13*P13*Pi2*Pi3*d2*l1*m2 + D13*P13*Pi2*Pi3*d3*l1*m3 + D12*P13^2*Pi1*Pi2*a*d1*d3*l1 + D13*P13^2*Pi1*Pi3*a*d1*d3*l1)/(P13*(C13*Pi1^2*d1*m3 + C13*Pi2^2*d1*m3 + D13*Pi1^2*d1*l1*m3 + D13*Pi2^2*d1*l1*m3 + P13*Pi1^2*a*d2*m2 + P13*Pi2^2*a*d2*m2 + P13*Pi1^2*a*d3*m3 + P13*Pi2^2*a*d3*m3 - P13^2*Pi1^2*a*d1*d2 - P13^2*Pi2^2*a*d1*d2));
    t1 = s1*(C13 + D13*l1) - c1*c2*(C11 + D11*l1) - c1*s2*(C12 + D12*l1);
    t2 = s2*(C11 + D11*l1) - c2*(C12 + D12*l1);
    t3 = P13 - c1*(C13 + D13*l1) - c2*s1*(C11 + D11*l1) - s1*s2*(C12 + D12*l1);
    
    if(abs(c2*c2 + s2*s2-1)<1e-3)
            sR(:,(iter-1)*3+1:iter*3) = [ e11*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e31*(c1*f31 - f11*s1) + e21*(c2*f21 + c1*f11*s2 + f31*s1*s2), e12*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e32*(c1*f31 - f11*s1) + e22*(c2*f21 + c1*f11*s2 + f31*s1*s2), e13*(c1*c2*f11 - f21*s2 + c2*f31*s1) + e33*(c1*f31 - f11*s1) + e23*(c2*f21 + c1*f11*s2 + f31*s1*s2);
                e11*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e31*(c1*f32 - f12*s1) + e21*(c2*f22 + c1*f12*s2 + f32*s1*s2), e12*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e32*(c1*f32 - f12*s1) + e22*(c2*f22 + c1*f12*s2 + f32*s1*s2), e13*(c1*c2*f12 - f22*s2 + c2*f32*s1) + e33*(c1*f32 - f12*s1) + e23*(c2*f22 + c1*f12*s2 + f32*s1*s2);
                e11*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e31*(c1*f33 - f13*s1) + e21*(c2*f23 + c1*f13*s2 + f33*s1*s2), e12*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e32*(c1*f33 - f13*s1) + e22*(c2*f23 + c1*f13*s2 + f33*s1*s2), e13*(c1*c2*f13 - f23*s2 + c2*f33*s1) + e33*(c1*f33 - f13*s1) + e23*(c2*f23 + c1*f13*s2 + f33*s1*s2)];
            sT(:,iter) =  [f11*t1 + f21*t2 + f31*t3 - f11*t1_ - f21*t2_ - f31*t3_
                f12*t1 + f22*t2 + f32*t3 - f12*t1_ - f22*t2_ - f32*t3_
                f13*t1 + f23*t2 + f33*t3 - f13*t1_ - f23*t2_ - f33*t3_];
             sl1(iter) = l1;
    end
    
end
