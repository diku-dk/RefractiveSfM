


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) MERL 2012
% CVPR 2012 Paper Title: A Theory of Multi-Layer Flat Refractive Geometry
% Author: Amit Agrawal
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% Given first two columns of E matrix, solve the last column of E matrix

% Two real solutions which differ in sign


function [Ef] = SolveLastColOfEmatrix(x)

tt = abs(x(:));

fac = 1/mean(tt);


x = x*fac;

e1 = x(1,1);
e2 = x(2,1);
e3 = x(3,1);
e4 = x(1,2);
e5 = x(2,2);
e6 = x(3,2);


s1 = (e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)^2*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)^2 + (e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)^2*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)^2 - (e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5)^2 + (2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)^2*(e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5) + (e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)*(e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)*(2*e1^3*e6^2 - 4*e1^2*e3*e4*e6 + 2*e1*e2^2*e6^2 + 2*e1*e3^2*e4^2 - 2*e1*e3^2*e5^2 - 4*e2^2*e3*e4*e6 + 4*e2*e3^2*e4*e5)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3) + (2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)*(e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5) - (e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)*(2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5);

s2 = 2*(e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)^2*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6) + (- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5)^2*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2) - 2*(e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)^2*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2) - ((e1^3*e5^2 - 2*e1^2*e2*e4*e5 + e1*e2^2*e4^2 - e1*e2^2*e6^2 + e1*e3^2*e5^2 + 2*e2^2*e3*e4*e6 - 2*e2*e3^2*e4*e5)*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2) - (e1^2*e5^3 - 2*e1*e2*e4*e5^2 + e2^2*e4^2*e5 + e2^2*e5*e6^2 - 2*e2*e3*e5^2*e6 + e3^2*e5^3)*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6))*(2*e1^3*e6^2 - 4*e1^2*e3*e4*e6 + 2*e1*e2^2*e6^2 + 2*e1*e3^2*e4^2 - 2*e1*e3^2*e5^2 - 4*e2^2*e3*e4*e6 + 4*e2*e3^2*e4*e5)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3) + (2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)^2*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6) + (2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5)*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6) + (2*e1^2*e5^2*e6 - 4*e1*e2*e4*e5*e6 + 2*e2^2*e4^2*e6 + 2*e2^2*e6^3 - 4*e2*e3*e5*e6^2 + 2*e3^2*e5^2*e6)*(e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)*(2*e1^3*e5*e6 - 2*e1^2*e2*e4*e6 - 2*e1^2*e3*e4*e5 + 2*e1*e2^2*e5*e6 + 2*e1*e2*e3*e4^2 - 2*e1*e2*e3*e5^2 - 2*e1*e2*e3*e6^2 + 2*e1*e3^2*e5*e6 - 2*e2^3*e4*e6 + 2*e2^2*e3*e4*e5 + 2*e2*e3^2*e4*e6 - 2*e3^3*e4*e5)*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2);

s3 = (- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)^2*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6)^2 + (e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5)^2*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2)^2 - (2*e1^3*e6^2 - 4*e1^2*e3*e4*e6 + 2*e1*e2^2*e6^2 + 2*e1*e3^2*e4^2 - 2*e1*e3^2*e5^2 - 4*e2^2*e3*e4*e6 + 4*e2*e3^2*e4*e5)*(- e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3)*(- e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2)*(e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6);


ss = roots([s1;s2;s3]);

idx = find(ss > 0);
if(isempty(idx))
    Ef = [];
    return;
end

ss = ss(idx);

cSol = [sqrt(ss) ; -sqrt(ss)];

kk = size(cSol,1);

Ef = zeros(3,3,kk);

for ii = 1:kk
    
    
    c = cSol(ii,1);
    
    x1 = e1^3*e6^2 - 2*e1^2*e3*e4*e6 + e1*e2^2*e6^2 + e1*e3^2*e4^2 - e1*e3^2*e5^2 - 2*e2^2*e3*e4*e6 + 2*e2*e3^2*e4*e5;
    x2 = - 2*c*e1^3*e5*e6 + 2*c*e1^2*e2*e4*e6 + 2*c*e1^2*e3*e4*e5 - 2*c*e1*e2^2*e5*e6 - 2*c*e1*e2*e3*e4^2 + 2*c*e1*e2*e3*e5^2 + 2*c*e1*e2*e3*e6^2 - 2*c*e1*e3^2*e5*e6 + 2*c*e2^3*e4*e6 - 2*c*e2^2*e3*e4*e5 - 2*c*e2*e3^2*e4*e6 + 2*c*e3^3*e4*e5;
    x3 = c^2*e1^3*e5^2 - 2*c^2*e1^2*e2*e4*e5 + c^2*e1*e2^2*e4^2 - c^2*e1*e2^2*e6^2 + c^2*e1*e3^2*e5^2 + 2*c^2*e2^2*e3*e4*e6 - 2*c^2*e2*e3^2*e4*e5 + e1^3*e2^2*e6^2 - 2*e1^3*e2*e3*e5*e6 + e1^3*e3^2*e5^2 + e1*e2^4*e6^2 - 2*e1*e2^3*e3*e5*e6 + e1*e2^2*e3^2*e5^2 + e1*e2^2*e3^2*e6^2 + e1*e2^2*e4^2*e6^2 - e1*e2^2*e5^2*e6^2 - e1*e2^2*e6^4 - 2*e1*e2*e3^3*e5*e6 - 2*e1*e2*e3*e4^2*e5*e6 + 2*e1*e2*e3*e5^3*e6 + 2*e1*e2*e3*e5*e6^3 + e1*e3^4*e5^2 + e1*e3^2*e4^2*e5^2 - e1*e3^2*e5^4 - e1*e3^2*e5^2*e6^2 + 2*e2^3*e4*e5*e6^2 - 4*e2^2*e3*e4*e5^2*e6 + 2*e2^2*e3*e4*e6^3 + 2*e2*e3^2*e4*e5^3 - 4*e2*e3^2*e4*e5*e6^2 + 2*e3^3*e4*e5^2*e6;
    
    y1 = - e1^2*e5*e6^2 + 2*e1*e2*e4*e6^2 + e2^2*e5*e6^2 - 2*e2*e3*e4^2*e6 - 2*e2*e3*e5^2*e6 + e3^2*e4^2*e5 + e3^2*e5^3;
    
    y2 = 2*c*e1^2*e5^2*e6 - 4*c*e1*e2*e4*e5*e6 + 2*c*e2^2*e4^2*e6 + 2*c*e2^2*e6^3 - 4*c*e2*e3*e5*e6^2 + 2*c*e3^2*e5^2*e6;
    
    y3 = -c^2*e1^2*e5^3 + 2*c^2*e1*e2*e4*e5^2 - c^2*e2^2*e4^2*e5 - c^2*e2^2*e5*e6^2 + 2*c^2*e2*e3*e5^2*e6 - c^2*e3^2*e5^3 - e1^2*e2^2*e5*e6^2 + 2*e1^2*e2*e3*e5^2*e6 - e1^2*e3^2*e5^3 + 2*e1*e2^3*e4*e6^2 - 4*e1*e2^2*e3*e4*e5*e6 + 2*e1*e2*e3^2*e4*e5^2 + e2^4*e5*e6^2 - 2*e2^3*e3*e5^2*e6 + 2*e2^3*e3*e6^3 + e2^2*e3^2*e5^3 - 5*e2^2*e3^2*e5*e6^2 + e2^2*e4^2*e5*e6^2 + e2^2*e5^3*e6^2 + e2^2*e5*e6^4 + 4*e2*e3^3*e5^2*e6 - 2*e2*e3*e4^2*e5^2*e6 - 2*e2*e3*e5^4*e6 - 2*e2*e3*e5^2*e6^3 - e3^4*e5^3 + e3^2*e4^2*e5^3 + e3^2*e5^5 + e3^2*e5^3*e6^2;
    
    b = -(x1*y3 - x3*y1)/(x1*y2 - x2*y1);
    
    E = x;
    E(2,3) = b;
    E(3,3) = c;
    E(1,3) = -(E(1)*E(5)*E(9) - E(1)*E(6)*E(8) - E(2)*E(4)*E(9) + E(3)*E(4)*E(8))/(E(2)*E(6) - E(3)*E(5));
    
    Ef(:,:,ii) = E;
    
    
end


Ef = Ef/fac;
